{"version":3,"sources":["/home/travis/build/basarat/gls/src/docs/components/spacers.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","this","Playground","Vertical","Horizontal","StretchSpacer","VerticalSpacer","HorizontalSpacer","demos","style","marginTop","space","height","horizontalAlign","isMDXComponent"],"mappings":"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","file":"static/js/src-docs-components-spacers.7d9b6933.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground } from 'docz';\nimport { Vertical, Horizontal, StretchSpacer, VerticalSpacer, HorizontalSpacer } from '../..'; \nimport * as demos from '../../demos'; \n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <demos.Star />\n    <h1 {...{\n      \"id\": \"spacer\"\n    }}>{`Spacer`}</h1>\n    <p>{`Spacers add `}<em parentName=\"p\">{`space`}</em>{` to your designs. Spacers should not be abused, but they can be super handy. Consider a simple button on the screen: `}</p>\n    <Playground __position={1} __code={'<demos.Button>Just a button minding its own business</demos.Button>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      StretchSpacer,\n      VerticalSpacer,\n      HorizontalSpacer,\n      demos\n    }} mdxType=\"Playground\">\n  <demos.Button>\n    Just a button minding its own business\n  </demos.Button>\n    </Playground>  \n    <p>{`Let's say the design wants you to add some space on top of the button. You can do that easily with `}<inlineCode parentName=\"p\">{`margin-top`}</inlineCode>{`: `}</p>\n    <Playground __position={2} __code={'<demos.Button style={{ marginTop: \\'25px\\' }}>\\n  Just a button minding its own business\\n</demos.Button>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      StretchSpacer,\n      VerticalSpacer,\n      HorizontalSpacer,\n      demos\n    }} mdxType=\"Playground\">\n  <demos.Button style={{\n        marginTop: '25px'\n      }}>\n    Just a button minding its own business\n  </demos.Button>\n    </Playground>  \n    <p>{`We've covered issues with using margin (specifically their collapsing nature and cross component dependencies, which makes them hard to manage and maintain reliably) in our `}<a parentName=\"p\" {...{\n        \"href\": \"../principle-spacing/\"\n      }}>{`spacing-principle`}</a>{`. Another issue is that `}<inlineCode parentName=\"p\">{`marginTop`}</inlineCode>{` can easily get lost in code reviews. `}</p>\n    <p>{`If you have a parent container, then you should use `}<inlineCode parentName=\"p\">{`padding={top}`}</inlineCode>{` but even that can get lost in code reviews. So if you want to be super explict about significant space / or don't have easy access to the parent padding, you can use a simple `}<inlineCode parentName=\"p\">{`VerticalSpacer`}</inlineCode>{`, which shows up in code reviews:`}</p>\n    <Playground __position={3} __code={'<VerticalSpacer space={25} />\\n<demos.Button>Just a button minding its own business</demos.Button>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      StretchSpacer,\n      VerticalSpacer,\n      HorizontalSpacer,\n      demos\n    }} mdxType=\"Playground\">\n  <VerticalSpacer space={25} mdxType=\"VerticalSpacer\" />\n  <demos.Button>\n    Just a button minding its own business\n  </demos.Button>\n    </Playground>  \n    <h2 {...{\n      \"id\": \"horizontalspacer\"\n    }}>{`HorizontalSpacer`}</h2>\n    <p>{`Takes the `}<inlineCode parentName=\"p\">{`space?:CSSLength`}</inlineCode>{` prop to generate a horizontal space. e.g. you can see the button pushed a bit to the right by a `}<inlineCode parentName=\"p\">{`HorizontalSpacer`}</inlineCode>{`: `}</p>\n    <Playground __position={4} __code={'<HorizontalSpacer space={25} />\\n<demos.Button>Just a button minding its own business</demos.Button>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      StretchSpacer,\n      VerticalSpacer,\n      HorizontalSpacer,\n      demos\n    }} mdxType=\"Playground\">\n  <HorizontalSpacer space={25} mdxType=\"HorizontalSpacer\" />\n  <demos.Button>\n    Just a button minding its own business\n  </demos.Button>\n    </Playground>  \n    <h2 {...{\n      \"id\": \"verticalspacer\"\n    }}>{`VerticalSpacer`}</h2>\n    <p>{`Takes the `}<inlineCode parentName=\"p\">{`space?:CSSLength`}</inlineCode>{` prop to generate a vertical space. e.g. you can see the button pushed a bit to the bottom by a `}<inlineCode parentName=\"p\">{`VerticalSpacer`}</inlineCode>{`: `}</p>\n    <Playground __position={5} __code={'<VerticalSpacer space={25} />\\n<demos.Button>Just a button minding its own business</demos.Button>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      StretchSpacer,\n      VerticalSpacer,\n      HorizontalSpacer,\n      demos\n    }} mdxType=\"Playground\">\n  <VerticalSpacer space={25} mdxType=\"VerticalSpacer\" />\n  <demos.Button>\n    Just a button minding its own business\n  </demos.Button>\n    </Playground>  \n    <h2 {...{\n      \"id\": \"stretchspacer\"\n    }}>{`StretchSpacer`}</h2>\n    <p>{`Takes the `}<inlineCode parentName=\"p\">{`sizing?:number`}</inlineCode>{` prop (`}<a parentName=\"p\" {...{\n        \"href\": \"../principle-sizing/\"\n      }}>{`stretch ratio concept covered in sizing principle`}</a>{`) to generate a stretch amount of space.`}</p>\n    <p><inlineCode parentName=\"p\">{`StretchSpacer`}</inlineCode>{` comes really handy when you want to split items to the sides (left & right) with a stretch space in between as shown below:`}</p>\n    <Playground __position={6} __code={'<Horizontal>\\n  <demos.Button>On left</demos.Button>\\n  <StretchSpacer />\\n  <demos.Button>On right</demos.Button>\\n</Horizontal>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      StretchSpacer,\n      VerticalSpacer,\n      HorizontalSpacer,\n      demos\n    }} mdxType=\"Playground\">\n  <Horizontal mdxType=\"Horizontal\">\n    <demos.Button>\n      On left\n    </demos.Button>\n    <StretchSpacer mdxType=\"StretchSpacer\" />\n    <demos.Button>\n      On right\n    </demos.Button>\n  </Horizontal>\n    </Playground>\n    <p><inlineCode parentName=\"p\">{`StretchSpacer`}</inlineCode>{` works automatically for both horizontal and vertical dimensions depending on the parent container. The following two examples demonstrate it with `}<inlineCode parentName=\"p\">{`Vertical(StretchSpacer,Button)`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Horizontal(StretchSpacer,Button)`}</inlineCode>{`: `}</p>\n    <Playground __position={7} __code={'<Vertical height={100}>\\n  <StretchSpacer />\\n  <demos.Button>Just a button minding its own business</demos.Button>\\n</Vertical>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      StretchSpacer,\n      VerticalSpacer,\n      HorizontalSpacer,\n      demos\n    }} mdxType=\"Playground\">\n  <Vertical height={100} mdxType=\"Vertical\">\n    <StretchSpacer mdxType=\"StretchSpacer\" />\n    <demos.Button>\n      Just a button minding its own business\n    </demos.Button>\n  </Vertical>\n    </Playground>\n    <Playground __position={8} __code={'<Horizontal>\\n  <StretchSpacer />\\n  <demos.Button>Just a button minding its own business</demos.Button>\\n</Horizontal>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      StretchSpacer,\n      VerticalSpacer,\n      HorizontalSpacer,\n      demos\n    }} mdxType=\"Playground\">\n  <Horizontal mdxType=\"Horizontal\">\n    <StretchSpacer mdxType=\"StretchSpacer\" />\n    <demos.Button>\n      Just a button minding its own business\n    </demos.Button>\n  </Horizontal>\n    </Playground>\n    <p>{`Note that when don't want to split items (all child items are grouped together), you can use the alignment properties on `}<inlineCode parentName=\"p\">{`Vertical`}</inlineCode>{`/`}<inlineCode parentName=\"p\">{`Horizontal`}</inlineCode>{` to achieve the same effect (no `}<inlineCode parentName=\"p\">{`StretchSpacer`}</inlineCode>{` in the below example):`}</p>\n    <Playground __position={9} __code={'<Horizontal horizontalAlign=\\\"right\\\">\\n  <demos.Button>Just a button minding its own business</demos.Button>\\n</Horizontal>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      StretchSpacer,\n      VerticalSpacer,\n      HorizontalSpacer,\n      demos\n    }} mdxType=\"Playground\">\n  <Horizontal horizontalAlign='right' mdxType=\"Horizontal\">\n    <demos.Button>\n      Just a button minding its own business\n    </demos.Button>\n  </Horizontal>\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}