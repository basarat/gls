(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{"./src/docs/components/spacers.mdx":function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return l});var o=n("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),i=(n("./node_modules/react/index.js"),n("./node_modules/@mdx-js/react/dist/index.es.js")),a=n("./node_modules/docz/dist/index.esm.js"),s=n("./src/index.tsx"),c=n("./src/demos/index.tsx"),r={},p="wrapper";function l(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)(p,Object.assign({},r,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)(c.Star,null),Object(i.b)("h1",{id:"spacer"},"Spacer"),Object(i.b)("p",null,"Spacers add ",Object(i.b)("em",{parentName:"p"},"space")," to your designs. Spacers should not be abused, but they can be super handy. Consider a simple button on the screen: "),Object(i.b)(a.c,{__position:1,__code:"<demos.Button>Just a button minding its own business</demos.Button>",__scope:{props:this?this.props:n,Playground:a.c,Vertical:s.j,Horizontal:s.e,StretchSpacer:s.i,VerticalSpacer:s.k,HorizontalSpacer:s.f,demos:c},mdxType:"Playground"},Object(i.b)(c.Button,null,"Just a button minding its own business")),Object(i.b)("p",null,"Let's say the design wants you to add some space on top of the button. You can do that easily with ",Object(i.b)("inlineCode",{parentName:"p"},"margin-top"),": "),Object(i.b)(a.c,{__position:2,__code:"<demos.Button style={{ marginTop: '25px' }}>\n  Just a button minding its own business\n</demos.Button>",__scope:{props:this?this.props:n,Playground:a.c,Vertical:s.j,Horizontal:s.e,StretchSpacer:s.i,VerticalSpacer:s.k,HorizontalSpacer:s.f,demos:c},mdxType:"Playground"},Object(i.b)(c.Button,{style:{marginTop:"25px"}},"Just a button minding its own business")),Object(i.b)("p",null,"We've covered issues with using margin (specifically their collapsing nature and cross component dependencies, which makes them hard to manage and maintain reliably) in our ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"../principle-spacing/"}),"spacing-principle"),". Another issue is that ",Object(i.b)("inlineCode",{parentName:"p"},"marginTop")," can easily get lost in code reviews. "),Object(i.b)("p",null,"If you have a parent container, then you should use ",Object(i.b)("inlineCode",{parentName:"p"},"padding={top}")," but even that can get lost in code reviews. So if you want to be super explict about significant space / or don't have easy access to the parent padding, you can use a simple ",Object(i.b)("inlineCode",{parentName:"p"},"VerticalSpacer"),", which shows up in code reviews:"),Object(i.b)(a.c,{__position:3,__code:"<VerticalSpacer space={25} />\n<demos.Button>Just a button minding its own business</demos.Button>",__scope:{props:this?this.props:n,Playground:a.c,Vertical:s.j,Horizontal:s.e,StretchSpacer:s.i,VerticalSpacer:s.k,HorizontalSpacer:s.f,demos:c},mdxType:"Playground"},Object(i.b)(s.k,{space:25,mdxType:"VerticalSpacer"}),Object(i.b)(c.Button,null,"Just a button minding its own business")),Object(i.b)("h2",{id:"horizontalspacer"},"HorizontalSpacer"),Object(i.b)("p",null,"Takes the ",Object(i.b)("inlineCode",{parentName:"p"},"space?:CSSLength")," prop to generate a horizontal space. e.g. you can see the button pushed a bit to the right by a ",Object(i.b)("inlineCode",{parentName:"p"},"HorizontalSpacer"),": "),Object(i.b)(a.c,{__position:4,__code:"<HorizontalSpacer space={25} />\n<demos.Button>Just a button minding its own business</demos.Button>",__scope:{props:this?this.props:n,Playground:a.c,Vertical:s.j,Horizontal:s.e,StretchSpacer:s.i,VerticalSpacer:s.k,HorizontalSpacer:s.f,demos:c},mdxType:"Playground"},Object(i.b)(s.f,{space:25,mdxType:"HorizontalSpacer"}),Object(i.b)(c.Button,null,"Just a button minding its own business")),Object(i.b)("h2",{id:"verticalspacer"},"VerticalSpacer"),Object(i.b)("p",null,"Takes the ",Object(i.b)("inlineCode",{parentName:"p"},"space?:CSSLength")," prop to generate a vertical space. e.g. you can see the button pushed a bit to the bottom by a ",Object(i.b)("inlineCode",{parentName:"p"},"VerticalSpacer"),": "),Object(i.b)(a.c,{__position:5,__code:"<VerticalSpacer space={25} />\n<demos.Button>Just a button minding its own business</demos.Button>",__scope:{props:this?this.props:n,Playground:a.c,Vertical:s.j,Horizontal:s.e,StretchSpacer:s.i,VerticalSpacer:s.k,HorizontalSpacer:s.f,demos:c},mdxType:"Playground"},Object(i.b)(s.k,{space:25,mdxType:"VerticalSpacer"}),Object(i.b)(c.Button,null,"Just a button minding its own business")),Object(i.b)("h2",{id:"stretchspacer"},"StretchSpacer"),Object(i.b)("p",null,"Takes the ",Object(i.b)("inlineCode",{parentName:"p"},"sizing?:number")," prop (",Object(i.b)("a",Object.assign({parentName:"p"},{href:"../principle-sizing/"}),"stretch ratio concept covered in sizing principle"),") to generate a stretch amount of space."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"StretchSpacer")," comes really handy when you want to split items to the sides (left & right) with a stretch space in between as shown below:"),Object(i.b)(a.c,{__position:6,__code:"<Horizontal>\n  <demos.Button>On left</demos.Button>\n  <StretchSpacer />\n  <demos.Button>On right</demos.Button>\n</Horizontal>",__scope:{props:this?this.props:n,Playground:a.c,Vertical:s.j,Horizontal:s.e,StretchSpacer:s.i,VerticalSpacer:s.k,HorizontalSpacer:s.f,demos:c},mdxType:"Playground"},Object(i.b)(s.e,{mdxType:"Horizontal"},Object(i.b)(c.Button,null,"On left"),Object(i.b)(s.i,{mdxType:"StretchSpacer"}),Object(i.b)(c.Button,null,"On right"))),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"StretchSpacer")," works automatically for both horizontal and vertical dimensions depending on the parent container. The following two examples demonstrate it with ",Object(i.b)("inlineCode",{parentName:"p"},"Vertical(StretchSpacer,Button)")," and ",Object(i.b)("inlineCode",{parentName:"p"},"Horizontal(StretchSpacer,Button)"),": "),Object(i.b)(a.c,{__position:7,__code:"<Vertical height={100}>\n  <StretchSpacer />\n  <demos.Button>Just a button minding its own business</demos.Button>\n</Vertical>",__scope:{props:this?this.props:n,Playground:a.c,Vertical:s.j,Horizontal:s.e,StretchSpacer:s.i,VerticalSpacer:s.k,HorizontalSpacer:s.f,demos:c},mdxType:"Playground"},Object(i.b)(s.j,{height:100,mdxType:"Vertical"},Object(i.b)(s.i,{mdxType:"StretchSpacer"}),Object(i.b)(c.Button,null,"Just a button minding its own business"))),Object(i.b)(a.c,{__position:8,__code:"<Horizontal>\n  <StretchSpacer />\n  <demos.Button>Just a button minding its own business</demos.Button>\n</Horizontal>",__scope:{props:this?this.props:n,Playground:a.c,Vertical:s.j,Horizontal:s.e,StretchSpacer:s.i,VerticalSpacer:s.k,HorizontalSpacer:s.f,demos:c},mdxType:"Playground"},Object(i.b)(s.e,{mdxType:"Horizontal"},Object(i.b)(s.i,{mdxType:"StretchSpacer"}),Object(i.b)(c.Button,null,"Just a button minding its own business"))),Object(i.b)("p",null,"Note that when don't want to split items (all child items are grouped together), you can use the alignment properties on ",Object(i.b)("inlineCode",{parentName:"p"},"Vertical"),"/",Object(i.b)("inlineCode",{parentName:"p"},"Horizontal")," to achieve the same effect (no ",Object(i.b)("inlineCode",{parentName:"p"},"StretchSpacer")," in the below example):"),Object(i.b)(a.c,{__position:9,__code:'<Horizontal horizontalAlign="right">\n  <demos.Button>Just a button minding its own business</demos.Button>\n</Horizontal>',__scope:{props:this?this.props:n,Playground:a.c,Vertical:s.j,Horizontal:s.e,StretchSpacer:s.i,VerticalSpacer:s.k,HorizontalSpacer:s.f,demos:c},mdxType:"Playground"},Object(i.b)(s.e,{horizontalAlign:"right",mdxType:"Horizontal"},Object(i.b)(c.Button,null,"Just a button minding its own business"))))}l&&l===Object(l)&&Object.isExtensible(l)&&Object.defineProperty(l,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/docs/components/spacers.mdx"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=src-docs-components-spacers.b16c3d5db788932f0a01.js.map