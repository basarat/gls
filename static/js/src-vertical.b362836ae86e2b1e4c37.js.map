{"version":3,"sources":["/home/travis/build/basarat/gls/src/classes/scroll.ts","/home/travis/build/basarat/gls/src/common.ts","/home/travis/build/basarat/gls/src/internal/utils.ts","/home/travis/build/basarat/gls/src/components/grid.tsx","/home/travis/build/basarat/gls/src/components/vertical.tsx","/home/travis/build/basarat/gls/src/components/horizontal.tsx","/home/travis/build/basarat/gls/src/components/containers.tsx","/home/travis/build/basarat/gls/src/index.tsx","/home/travis/build/basarat/gls/src/demos.tsx","/home/travis/build/basarat/gls/src/vertical.mdx"],"names":["scroll","typestyle","-webkit-overflow-scrolling","overflow","scrollHorizontal","overflowX","scrollVertical","overflowY","someChildWillScroll","Spacing","vertical","horizontal","grid","boxUnitToString","value","toString","processGLSProps","props","padding","otherProps","Object","objectWithoutProperties","klass","scrollHelpers","gridSpaced","topAndBottom","leftAndRight","arguments","length","undefined","marginTop","marginLeft","&>*","Grid","className","spacing","_props$spacing","slicedToArray","classes","react","assign","data-comment","displayName","Vertical","horizontalAlign","verticalAlign","csstips","Horizontal","Flex","Content","__webpack_require__","d","__webpack_exports__","vertical_Vertical","horizontal_Horizontal","containers_Flex","BlueDiv","react_default","a","createElement","style","backgroundColor","children","PinkDiv","layoutProps","MDXLayout","MDXContent","_ref","components","index_es","mdxType","id","index_esm","__position","__code","__scope","this","Playground","Props","demos","src","demos_BlueDiv","isMDXComponent"],"mappings":"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","file":"static/js/src-vertical.c222e96d.js","sourcesContent":["/**\n * @module scroll helpers\n */\nimport * as typestyle from 'typestyle';\n\nexport const scroll = () => typestyle.style({\n  '-webkit-overflow-scrolling': 'touch',\n  overflow: 'auto'\n});\n\nexport const scrollHorizontal = () => typestyle.style({\n  '-webkit-overflow-scrolling': 'touch',\n  overflowX: 'auto'\n});\n\nexport const scrollVertical = () => typestyle.style({\n  '-webkit-overflow-scrolling': 'touch',\n  overflowY: 'auto'\n});\n\n/**\n * If you expect a child somewhere down in the tree to scroll\n * you need to tell the browser to prevent a scroll bar. \n * Use : `parent(someChildWillScroll) > child(scroll)`\n */\nexport const someChildWillScroll = () => typestyle.style({\n  overflow: 'hidden'\n});\n","/** \n * The default spacing used by the layout components \n * You can customize it e.g. \n * ```ts\n * import { Spacing } from 'gls';\n * Spacing.vertical = 30;\n * ```\n */\nexport const Spacing = {\n  vertical: 24,\n  horizontal: 24,\n  grid: {\n    vertical: 24,\n    horizontal: 24,\n  }\n}\n\n/** \n * Example: \n * - 5 (implies 5px)\n * - '5rem'\n */\nexport type BoxUnit = number | string;\n\n/**\n * A box function is something that can take:\n * - all\n * - topAndBottom + leftRight\n * - top + right + bottom + left\n */\nexport interface BoxFunction<T> {\n  (all: BoxUnit): T;\n  (topAndBottom: BoxUnit, leftAndRight: BoxUnit): T;\n  (top: BoxUnit, right: BoxUnit, bottom: BoxUnit, left: BoxUnit): T;\n}\n\n/** \n * DataStructure for common prop tuple representation \n */\nexport type Box =\n  /** top,right,bottom,left */\n  | BoxUnit\n  /** Top&Bottom, Left&Right */\n  | [BoxUnit, BoxUnit]\n  /** Top, Right, Bottom, Left */\n  | [BoxUnit, BoxUnit, BoxUnit, BoxUnit];\n\n/** \n * Props accepted by all our components \n */\nexport interface GLSProps extends React.HTMLProps<HTMLDivElement> {\n  scroll?: 'both' | 'vertical' | 'horizontal';\n  padding?: Box;\n}\n","import * as typestyle from 'typestyle';\nimport { BoxUnit, GLSProps } from \"../common\";\nimport * as scrollHelpers from \"../classes/scroll\";\n\n/**\n * For `number` we assume pixels e.g. 5 => '5px'\n * For `string` *you* should provide the unit e.g. '5px'\n */\nexport function boxUnitToString(value: BoxUnit): string {\n  if (typeof value === 'number') {\n    return value.toString() + 'px';\n  }\n  else {\n    return value;\n  }\n}\n\n/** \n * Converts common suppoted props into a `klass` + remainder \n */\nexport function processGLSProps<T extends GLSProps>(props: T): { klass: string, otherProps: any } {\n  const { scroll, padding, ...otherProps } = props;\n\n  return {\n    klass: typestyle.classes(\n      /** Scroll */\n      props.scroll != null && (\n        props.scroll == 'horizontal' ? scrollHelpers.scrollHorizontal()\n          : props.scroll == 'vertical' ? scrollHelpers.scrollVertical()\n            : scrollHelpers.scroll()\n      ),\n    /** Padding */\n      props.padding != null && typestyle.style()\n    ),\n    otherProps\n  }\n}","import * as typestyle from 'typestyle';\nimport { types, classes } from 'typestyle';\nimport * as React from 'react';\nimport { Spacing, BoxUnit } from '../common';\nimport { boxUnitToString } from '../internal/utils';\n\n/**\n * Puts a (horizontal AND vertical) margin between each child\n */\nexport function gridSpaced(both: BoxUnit): string;\nexport function gridSpaced(topAndBottom: BoxUnit, leftAndRight: BoxUnit): string;\nexport function gridSpaced(topAndBottom: BoxUnit, leftAndRight = topAndBottom): string {\n  const vertical = boxUnitToString(topAndBottom);\n  const horizontal = boxUnitToString(leftAndRight);\n  return typestyle.style(\n    {\n      marginTop: '-' + vertical,\n      marginLeft: '-' + horizontal,\n      '&>*': {\n        marginTop: vertical,\n        marginLeft: horizontal,\n      }\n    } as types.CSSProperties\n  );\n};\n\nexport interface GridProps extends React.HTMLProps<HTMLDivElement> {\n  spacing?:\n  | BoxUnit\n  | [BoxUnit, BoxUnit]\n}\n\n/** \n * Lays out children with a margin between them (horizontal and vertical)\n */\nexport const Grid: React.FC<GridProps> = (props) => {\n  const { className, ...otherProps } = props;\n\n  /** \n   * Figure out the spacing requested \n   */\n  let horizontal!: BoxUnit;\n  let vertical!: BoxUnit;\n  if ('spacing' in props && props.spacing != null) {\n    delete (otherProps as any).spacing;\n    if (typeof props.spacing == 'number' || typeof props.spacing == 'string') {\n      horizontal = props.spacing;\n      vertical = horizontal;\n    } else {\n      [vertical, horizontal] = props.spacing;\n    }\n  }\n\n  const klass = classes(\n    className,\n    gridSpaced(vertical, horizontal),\n  );\n  return (\n    <div {...otherProps} className={klass} data-comment='Grid' />\n  );\n}\nGrid.displayName = 'Grid';\n","import * as typestyle from 'typestyle';\nimport * as React from 'react';\nimport * as csstips from 'csstips';\nimport { Spacing } from '../common';\n\n///////////////////////////////////\n// Vertical \n///////////////////////////////////\n\nexport interface VerticalProps extends React.HTMLProps<HTMLDivElement> {\n  spacing?: number,\n\n  verticalAlign?: 'top' /** default */ | 'center' | 'bottom',\n  horizontalAlign?: 'left' /** default */ | 'right' | 'center',\n}\n\n/** \n * Layout out children with a vertical margin between them\n */\nexport const Vertical: React.FC<VerticalProps> = (props) => {\n  const {\n    className,\n    horizontalAlign,\n    verticalAlign,\n    ...otherProps\n  } = props;\n\n  const klass = typestyle.classes(\n    className,\n    typestyle.style(\n      csstips.content,\n      csstips.vertical,\n      csstips.verticallySpaced(props.spacing == null ? Spacing.vertical : props.spacing),\n      verticalAlign == 'center' && csstips.centerJustified,\n      verticalAlign == 'bottom' && csstips.endJustified,\n      horizontalAlign == 'right' && csstips.end,\n      horizontalAlign == 'center' && csstips.center,\n    )\n  );\n\n  return (\n    <div {...otherProps} className={klass} data-comment='Vertical' />\n  );\n}\nVertical.displayName = 'Vertical';\n","import * as typestyle from 'typestyle';\nimport * as React from 'react';\nimport * as csstips from 'csstips';\nimport { Spacing } from '../common';\n\n///////////////////////////////////\n// Horizontal\n///////////////////////////////////\n\nexport interface HorizontalProps extends React.HTMLProps<HTMLDivElement> {\n  spacing?: number,\n\n  horizontalAlign?: 'left' /** default */ | 'right' | 'center',\n  verticalAlign?: 'top' /** default */ | 'center' | 'bottom',\n}\n\nexport const Horizontal: React.FC<HorizontalProps> = (props) => {\n  const {\n    className,\n    horizontalAlign,\n    verticalAlign,\n    ...otherProps } = props;\n\n  const klass =\n    typestyle.classes(\n      className,\n      typestyle.style(\n        csstips.content,\n        csstips.horizontal,\n        csstips.horizontallySpaced(props.spacing == null ? Spacing.horizontal : props.spacing),\n        horizontalAlign == 'right' && csstips.endJustified,\n        horizontalAlign == 'center' && csstips.centerJustified,\n        verticalAlign == 'center' && csstips.center,\n        verticalAlign == 'bottom' && csstips.end,\n      )\n    );\n\n  return (\n    <div {...otherProps} className={klass} data-comment='Horizontal' />\n  );\n}\nHorizontal.displayName = 'Horizontal';","import * as typestyle from 'typestyle';\nimport * as React from 'react';\nimport * as csstips from 'csstips';\n\n/** \n * For providing a *as much as available* amount of space for an item\n */\nexport const Flex: React.FC<React.HTMLProps<HTMLDivElement>> = (props) => {\n  const { className, ...otherProps } = props;\n  const klass = typestyle.classes(\n    className,\n    typestyle.style(csstips.flex)\n  );\n  return (\n    <div {...otherProps} className={klass} data-comment='Flex' />\n  );\n};\nFlex.displayName = 'Flex';\n\n/** \n * For providing a *as much as needed* amount of space for an item\n */\nexport const Content: React.FC<React.HTMLProps<HTMLDivElement>> = (props) => {\n  const { className, ...otherProps } = props;\n  const klass = typestyle.classes(\n    className,\n    typestyle.style(csstips.content)\n  );\n  return (\n    <div {...otherProps} className={klass} data-comment='Content' />\n  );\n};\nContent.displayName = 'Content';\n","export * from './classes/scroll';\n\nexport * from './common';\nexport * from './components/grid';\nexport * from './components/vertical';\nexport * from './components/horizontal';\nexport * from './components/containers';\n","/** \n * Demo components for docs \n */\n\nimport React from \"react\";\n\nexport const BlueDiv: React.FC = (props) => <div style={{ backgroundColor: \"lightskyblue\" }} children={props.children} />;\nexport const PinkDiv: React.FC = (props) => <div style={{ backgroundColor: \"lightpink\" }} children={props.children} />;\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Vertical } from '.'; \nimport * as demos from './demos'; \n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"vertical\"\n    }}>{`Vertical`}</h1>\n    <p>{`Lays out children in a vertically spaced layout.`}</p>\n    <Playground __position={0} __code={'<Vertical>\\n  <demos.BlueDiv>Hello</demos.BlueDiv>\\n  <div>World</div>\\n</Vertical>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Vertical,\n      demos\n    }} mdxType=\"Playground\">\n  <Vertical mdxType=\"Vertical\">\n    <demos.BlueDiv>Hello</demos.BlueDiv>\n    <div>World</div>\n  </Vertical>\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}