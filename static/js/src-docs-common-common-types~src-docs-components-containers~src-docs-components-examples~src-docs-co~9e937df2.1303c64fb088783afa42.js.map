{"version":3,"sources":["/home/travis/build/basarat/gls/src/common.tsx","/home/travis/build/basarat/gls/src/styles/scroll.ts","/home/travis/build/basarat/gls/src/styles/flex.ts","/home/travis/build/basarat/gls/src/internal/utils.tsx","/home/travis/build/basarat/gls/src/components/containers.tsx","/home/travis/build/basarat/gls/src/styles/spacing.ts","/home/travis/build/basarat/gls/src/components/vertical.tsx","/home/travis/build/basarat/gls/src/components/horizontal.tsx","/home/travis/build/basarat/gls/src/components/responsive.tsx","/home/travis/build/basarat/gls/src/components/grid.tsx","/home/travis/build/basarat/gls/src/components/spacers.tsx","/home/travis/build/basarat/gls/src/index.tsx"],"names":["GLSDefaults","React","createContext","verticalSpacing","horizontalSpacing","breakpoint","scrollBoth","-webkit-overflow-scrolling","overflow","scrollHorizontal","overflowX","scrollVertical","overflowY","scrollHidden","flexRoot","display","horizontal","extend","-ms-flex-direction","-webkit-flex-direction","flexDirection","vertical","wrap","-ms-flex-wrap","-webkit-flex-wrap","flexWrap","content","-ms-flex-negative","-webkit-flex-shrink","flexShrink","flexBasis","flex","arguments","length","undefined","-ms-flex","-webkit-flex","start","-ms-flex-align","-webkit-align-items","alignItems","center","end","startJustified","-ms-flex-pack","-webkit-justify-content","justifyContent","centerJustified","endJustified","betweenJustified","aroundJustified","cssLengthToString","value","_processPadding","box","_boxToFullBox","_box$map","map","_box$map2","Object","slicedToArray","topBottom","leftRight","boxToFullBox","_boxToFullBox2","paddingTop","paddingRight","paddingBottom","paddingLeft","createGLSTag","props","klass","comment","className","padding","height","minHeight","maxHeight","width","minWidth","maxWidth","scroll","_props$styles","styles","tag","otherProps","objectWithoutProperties","createElement","name","objectSpread","typestyle","apply","scrollHelpers","concat","toConsumableArray","data-comment","processSizingProp","prop","_prop$sizing","sizing","fx","useGLSDefaults","context","useContext","Flex","displayName","Content","verticallySpaced","margin","&>*","marginBottom","&>*:last-child","horizontallySpaced","marginRight","gridSpaced","topAndBottom","leftAndRight","marginTop","marginLeft","$nest","Vertical","_props$spacing","spacing","horizontalAlign","verticalAlign","Horizontal","Responsive","_useGLSDefaults","defaultVerticalSpacing","defaultHorizontalSpacing","bp","_props$breakpoint","verticalOptions","horizontalOptions","verticalSizing","horizontalSizing","verticalModeVerticalAlign","verticalModeHorizontalAlign","horizontalModeVerticalAlign","horizontalModeHorizontalAlign","style","Grid","justify","_spacing","FlexSpacer","react","assign","HorizontalSpacer","space","VerticalSpacer","__webpack_require__","d","__webpack_exports__","containers_Flex","containers_Content","vertical_Vertical","horizontal_Horizontal","responsive_Responsive","grid_Grid","spacers_FlexSpacer","spacers_HorizontalSpacer","spacers_VerticalSpacer"],"mappings":"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","file":"static/js/src-docs-common-common-types~src-docs-components-containers~src-docs-components-examples~src-docs-co~9e937df2.7748f910.js","sourcesContent":["import { types } from \"typestyle\";\nimport React from 'react';\n\n/**\n * Default values for components \n */\nexport const GLSDefaults = React.createContext<{\n  verticalSpacing?: CSSLength,\n  horizontalSpacing?: CSSLength,\n  breakpoint?: number\n}>({\n  verticalSpacing: 24,\n  horizontalSpacing: 24,\n  breakpoint: 480,\n});\n\n/** \n * Example: \n * - 5 (implies 5px)\n * - '5rem'\n */\nexport type CSSLength = number | string;\n\n/** \n * Various versions of providing common shorthand properties\n */\nexport type CSSBox =\n  /** top,right,left,bottom */\n  | CSSLength\n  /** [top & bottom, left & right] */\n  | [CSSLength, CSSLength]\n  /** [top,right,bottom,left] */\n  | [CSSLength, CSSLength, CSSLength, CSSLength]\n\n/** \n * Specifies sizing interaction\n */\nexport interface SizingProp {\n  /** \n   * Specifies `sizing` interaction\n   */\n  sizing?:\n  | 'content' /** default */\n  | 'flex' /** Same as `1` */\n  | number /** A flex ratio */;\n}\n\nexport interface SpacingProp {\n  /** Spacing between each child */\n  spacing?: number,\n}\n\nexport interface AlignmentProps {\n  /** Child alignment in vertical axis */\n  verticalAlign?: 'top' /** default */ | 'center' | 'bottom',\n  /** Child alignment in horizontal axis */\n  horizontalAlign?: 'left' /** default */ | 'center' | 'right',\n}\n\n/** \n * Specifies children layout options \n */\nexport interface ChildPlacementProps extends SpacingProp, AlignmentProps {\n}\n\n/** \n * Props accepted by all our container components\n */\nexport interface GLSProps extends PaddingProp, SizeProps, ScrollProp, StylesProp, TagProps {\n}\n\n/** \n * Add support for padding\n */\nexport interface PaddingProp {\n  padding?: CSSBox,\n}\n\n\n/** \n * Add support for explicit sizing\n */\nexport interface SizeProps {\n  height?: CSSLength,\n  minHeight?: CSSLength,\n  maxHeight?: CSSLength,\n\n  width?: CSSLength,\n  minWidth?: CSSLength,\n  maxWidth?: CSSLength,\n}\n\n/** \n * Add on anything to add support for controlling the scroll\n */\nexport interface ScrollProp {\n  scroll?:\n  | 'overflow' /** default */\n  | 'both'\n  | 'vertical'\n  | 'horizontal'\n  | 'hidden';\n}\n\n/** \n * Support for mixing in NestedCSSProperties \n */\nexport interface StylesProp {\n  styles?: (types.NestedCSSProperties | null | false)[];\n}\n\n/** \n * Support for React `style` property\n */\nexport interface StyleProp {\n  style?: React.CSSProperties;\n}\n\n/** \n * Props supported by the underlying tag \n */\nexport interface TagProps extends StyleProp {\n  className?: string,\n\n  tag?:\n  {\n    /** name default: div */\n    props: Omit<React.HTMLProps<HTMLDivElement>, 'className' | 'style'>;\n  }\n  | {\n    name: 'div';\n    props?: Omit<React.HTMLProps<HTMLDivElement>, 'className' | 'style'>;\n  }\n  | {\n    name: 'button';\n    props?: Omit<React.HTMLProps<HTMLButtonElement>, 'className' | 'style'>;\n  }\n  | {\n    name: 'input';\n    props?: Omit<React.HTMLProps<HTMLInputElement>, 'className' | 'style'>;\n  }\n  | {\n    name: 'select';\n    props?: Omit<React.HTMLProps<HTMLSelectElement>, 'className' | 'style'>;\n  }\n  | {\n    name: 'section';\n    props?: Omit<React.HTMLProps<HTMLDivElement>, 'className' | 'style'>;\n  }\n  | {\n    name: 'a';\n    props?: Omit<React.HTMLProps<HTMLAnchorElement>, 'className' | 'style'>;\n  }\n  // TODO: heading paragraph\n}\n","/**\n * @module scroll helpers\n */\nimport { types } from 'typestyle';\n\nexport const scrollBoth: types.NestedCSSProperties = {\n  '-webkit-overflow-scrolling': 'touch',\n  overflow: 'auto'\n};\n\nexport const scrollHorizontal: types.NestedCSSProperties = {\n  '-webkit-overflow-scrolling': 'touch',\n  overflowX: 'auto'\n};\n\nexport const scrollVertical: types.NestedCSSProperties = {\n  '-webkit-overflow-scrolling': 'touch',\n  overflowY: 'auto'\n};\n\n/**\n * Cuts off the exccess content and disables the scroll bar\n */\nexport const scrollHidden: types.NestedCSSProperties = {\n  overflow: 'hidden'\n};\n","import { types, extend } from \"typestyle\";\n\n/**\n * \n * If you have more than one child prefer horizontal,vertical\n */\nexport const flexRoot: types.CSSProperties = {\n  display: [\n    '-ms-flexbox',\n    '-webkit-flex',\n    'flex',\n  ]\n};\n\nexport const horizontal: types.CSSProperties = extend(flexRoot, {\n  '-ms-flex-direction': 'row',\n  '-webkit-flex-direction': 'row',\n  flexDirection: 'row'\n});\nexport const vertical: types.CSSProperties = extend(flexRoot, {\n  '-ms-flex-direction': 'column',\n  '-webkit-flex-direction': 'column',\n  flexDirection: 'column'\n});\nexport const wrap: types.CSSProperties = {\n  '-ms-flex-wrap': 'wrap',\n  '-webkit-flex-wrap': 'wrap',\n  flexWrap: 'wrap'\n} as types.CSSProperties;\n\n/**\n * If you want items to be sized automatically by their children use this\n * This is because of a bug in various flexbox implementations: http://philipwalton.com/articles/normalizing-cross-browser-flexbox-bugs/\n * Specifically bug 1 : https://github.com/philipwalton/flexbugs#1-minimum-content-sizing-of-flex-items-not-honored\n */\nexport const content: types.CSSProperties = {\n  '-ms-flex-negative': 0,\n  '-webkit-flex-shrink': 0,\n  flexShrink: 0,\n  flexBasis: 'auto',\n} as types.CSSProperties;\n\nexport const flex = (flex: number = 1): types.CSSProperties => {\n  return {\n    '-ms-flex': flex,\n    '-webkit-flex': flex,\n    flex: flex\n  };\n};\n\n/////////////////////////////\n// Alignment in cross axis //\n/////////////////////////////\n\nexport const start: types.CSSProperties = {\n  '-ms-flex-align': 'start',\n  '-webkit-align-items': 'flex-start',\n  alignItems: 'flex-start'\n} as types.CSSProperties;\nexport const center: types.CSSProperties = {\n  '-ms-flex-align': 'center',\n  '-webkit-align-items': 'center',\n  alignItems: 'center'\n} as types.CSSProperties;\nexport const end: types.CSSProperties = {\n  '-ms-flex-align': 'end',\n  '-webkit-align-items': 'flex-end',\n  alignItems: 'flex-end'\n} as types.CSSProperties;\n\n////////////////////////////\n// Alignment in main axis //\n////////////////////////////\n\nexport const startJustified: types.CSSProperties = {\n  '-ms-flex-pack': 'start',\n  '-webkit-justify-content': 'flex-start',\n  justifyContent: 'flex-start'\n} as types.CSSProperties;\nexport const centerJustified: types.CSSProperties = {\n  '-ms-flex-pack': 'center',\n  '-webkit-justify-content': 'center',\n  justifyContent: 'center'\n} as types.CSSProperties;\nexport const endJustified: types.CSSProperties = {\n  '-ms-flex-pack': 'end',\n  '-webkit-justify-content': 'flex-end',\n  justifyContent: 'flex-end'\n} as types.CSSProperties;\n\n////////////////////////////////////////////\n// Alignment in main axis - grid specific //\n////////////////////////////////////////////\nexport const betweenJustified = {\n  '-ms-flex-pack': 'justify',\n  '-webkit-justify-content': 'space-between',\n  justifyContent: 'space-between'\n} as types.CSSProperties;\n\nexport const aroundJustified = {\n  '-ms-flex-pack': 'distribute',\n  '-webkit-justify-content': 'space-around',\n  justifyContent: 'space-around'\n} as types.CSSProperties;\n","import * as typestyle from 'typestyle';\nimport { CSSLength, GLSProps, SizingProp, GLSDefaults, CSSBox } from \"../common\";\nimport * as scrollHelpers from \"../styles/scroll\";\nimport { content, flex } from '../styles/flex';\nimport React, { useContext } from 'react';\n\n/**\n * For `number` we assume pixels e.g. 5 => '5px'\n * For `string` *you* should provide the unit e.g. '5px'\n */\nexport function cssLengthToString(value: CSSLength): string {\n  return typeof value === 'number' ? value + 'px' : value;\n}\n\n/** \n * Ensures all four members of box are present\n */\nfunction boxToFullBox(box: CSSBox): [CSSLength, CSSLength, CSSLength, CSSLength] {\n  if (typeof box == 'number' || typeof box == 'string') {\n    const value = cssLengthToString(box);\n    return [value, value, value, value];\n  } else if (box.length == 2) {\n    const [topBottom, leftRight] = box.map(cssLengthToString);\n    return [topBottom, leftRight, topBottom, leftRight];\n  } else {\n    return box.map(cssLengthToString) as [CSSLength, CSSLength, CSSLength, CSSLength];\n  }\n}\n\n/** \n * Utility to unwrap the three ways a padding might be provided \n */\nfunction _processPadding(box: CSSBox)\n  : typestyle.types.NestedCSSProperties {\n  const [paddingTop, paddingRight, paddingBottom, paddingLeft] = boxToFullBox(box);\n  return { paddingTop, paddingRight, paddingBottom, paddingLeft };\n}\n\n/** \n * Creates the appropriate tag\n * - Does any processing of GLSProps if required\n * - Then creates the approvate react tag\n */\nexport function createGLSTag<T extends GLSProps>(\n  props: T,\n\n  /** Any additional customizations done by the component */\n  klass: string,\n\n  /** Comment to help with debuggin */\n  comment: string,\n) {\n  const {\n    className,\n    padding,\n    height,\n    minHeight,\n    maxHeight,\n    width,\n    minWidth,\n    maxWidth,\n    scroll,\n    styles = [],\n    tag, ...otherProps } = props;\n\n  return React.createElement(\n    (tag != null && ('name' in tag) && tag.name != null) ? tag.name : 'div',\n    {\n      className: typestyle.classes(\n        className,\n        klass,\n        typestyle.style(\n          /** Scroll */\n          scroll != null && (\n            scroll == 'hidden' ? scrollHelpers.scrollHidden\n              : scroll == 'horizontal' ? scrollHelpers.scrollHorizontal\n                : scroll == 'vertical' ? scrollHelpers.scrollVertical\n                  : scroll == 'both' ? scrollHelpers.scrollBoth\n                    : null\n          ),\n          /** Padding */\n          padding != null && (_processPadding(padding)),\n          /** Size props */\n          height != null && { height: cssLengthToString(height) },\n          minHeight != null && { minHeight: cssLengthToString(minHeight) },\n          maxHeight != null && { maxHeight: cssLengthToString(maxHeight) },\n          width != null && { width: cssLengthToString(width) },\n          minWidth != null && { minWidth: cssLengthToString(minWidth) },\n          maxWidth != null && { maxWidth: cssLengthToString(maxWidth) },\n          /** Any user customizations */\n          ...styles,\n        )\n      ),\n      'data-comment': comment,\n      ...otherProps,\n      ...((tag != null && tag.props != null) ? tag.props : {}),\n    }\n  )\n}\n\n/** \n * Generates the appropriate styles to handle the flex interaction \n */\nexport function processSizingProp(prop: SizingProp): typestyle.types.CSSProperties {\n  const { sizing: fx = 'content' } = prop;\n  return fx == 'content' ? content\n    : fx == 'flex' ? flex(1)\n      : flex(fx);\n}\n\n/** \n * Uses the defaults safely \n */\nexport function useGLSDefaults() {\n  const context = useContext(GLSDefaults);\n  return {\n    verticalSpacing: context.verticalSpacing == null ? 24 : context.verticalSpacing,\n    horizontalSpacing: context.horizontalSpacing == null ? 24 : context.horizontalSpacing,\n    breakpoint: context.breakpoint == null ? 480 : context.breakpoint,\n  }\n}\n","import * as typestyle from 'typestyle';\nimport * as React from 'react';\nimport { GLSProps } from '../common';\nimport { createGLSTag } from '../internal/utils';\nimport { content, flex } from '../styles/flex';\n\nexport interface FlexProps extends GLSProps {\n  sizing?: number;\n}\n\n/** \n * For providing a *as much as available* amount of space for an item\n */\nexport const Flex: React.FC<FlexProps> = (props) => {\n  const klass = typestyle.style(flex(props.sizing));\n  return createGLSTag(props, klass, 'Flex');\n};\nFlex.displayName = 'Flex';\n\n/** \n * For providing a *as much as needed* amount of space for an item\n */\nexport const Content: React.FC<GLSProps> = (props) => {\n  const klass = typestyle.style(content);\n  return createGLSTag(props, klass, 'Content');\n};\nContent.displayName = 'Content';\n","import * as typestyle from 'typestyle';\nimport { CSSLength } from \"../common\";\nimport { cssLengthToString } from '../internal/utils';\n\n/**\n * Puts a vertical margin between each child\n */\nexport const verticallySpaced = (margin: CSSLength) => {\n  const spacing = cssLengthToString(margin);\n  return (\n    {\n      '&>*': {\n        marginBottom: spacing + ' !important'\n      },\n      '&>*:last-child': {\n        marginBottom: '0px !important',\n      }\n    } as typestyle.types.NestedCSSProperties\n  );\n};\n\n/**\n * Puts a horizontal margin between each child\n */\nexport const horizontallySpaced = (margin: CSSLength) => {\n  const spacing = cssLengthToString(margin);\n  return (\n    {\n      '&>*': {\n        marginRight: spacing + ' !important'\n      },\n      '&>*:last-child': {\n        marginRight: '0px !important',\n      }\n    } as typestyle.types.CSSProperties\n  );\n};\n\n/**\n * Puts a (horizontal AND vertical) margin between each child\n */\nexport function gridSpaced(both: CSSLength): typestyle.types.NestedCSSProperties;\nexport function gridSpaced(topAndBottom: CSSLength, leftAndRight: CSSLength): typestyle.types.NestedCSSProperties;\nexport function gridSpaced(topAndBottom: CSSLength, leftAndRight = topAndBottom): typestyle.types.NestedCSSProperties {\n  const verticalSpacing = cssLengthToString(topAndBottom);\n  const horizontalSpacing = cssLengthToString(leftAndRight);\n  return {\n    marginTop: '-' + verticalSpacing + ' !important',\n    marginLeft: '-' + horizontalSpacing + ' !important',\n    $nest: {\n      '&>*': {\n        marginTop: verticalSpacing + ' !important',\n        marginLeft: horizontalSpacing + ' !important',\n      }\n    }\n  };\n};\n","import * as typestyle from 'typestyle';\nimport * as React from 'react';\nimport { GLSProps, SizingProp, ChildPlacementProps } from '../common';\nimport { createGLSTag, processSizingProp, useGLSDefaults } from '../internal/utils';\nimport { vertical, centerJustified, endJustified, end, center } from '../styles/flex';\nimport { verticallySpaced } from '../styles/spacing';\n\nexport interface VerticalProps extends GLSProps, SizingProp, ChildPlacementProps {\n}\n\n/** \n * Layout out children vertically with a margin between them\n */\nexport const Vertical: React.FC<VerticalProps> = (props) => {\n  const { verticalSpacing } = useGLSDefaults();\n  const {\n    sizing,\n\n    spacing = verticalSpacing,\n    horizontalAlign,\n    verticalAlign,\n\n    ...otherProps\n  } = props;\n\n  const klass = typestyle.style(\n    processSizingProp(props),\n    vertical,\n    verticalSpacing !== 0 && verticallySpaced(spacing),\n    verticalAlign == 'center' && centerJustified,\n    verticalAlign == 'bottom' && endJustified,\n    horizontalAlign == 'center' && center,\n    horizontalAlign == 'right' && end,\n  );\n  return createGLSTag(otherProps, klass, 'Vertical');\n}\nVertical.displayName = 'Vertical';\n","import * as typestyle from 'typestyle';\nimport * as React from 'react';\nimport { GLSProps, SizingProp, ChildPlacementProps } from '../common';\nimport { createGLSTag, processSizingProp, useGLSDefaults } from '../internal/utils';\nimport { horizontal, endJustified, centerJustified, center, end } from '../styles/flex';\nimport { horizontallySpaced } from '../styles/spacing';\n\nexport interface HorizontalProps extends GLSProps, SizingProp, ChildPlacementProps {\n}\n\n/** \n * Layout out children horizontally with a margin between them\n */\nexport const Horizontal: React.FC<HorizontalProps> = (props) => {\n  const { horizontalSpacing } = useGLSDefaults();\n  const {\n    sizing,\n\n    spacing = horizontalSpacing,\n    horizontalAlign,\n    verticalAlign,\n    \n    ...otherProps } = props;\n\n  const klass = typestyle.style(\n    processSizingProp(props),\n    horizontal,\n    horizontalSpacing !== 0 && horizontallySpaced(spacing),\n    horizontalAlign == 'center' && centerJustified,\n    horizontalAlign == 'right' && endJustified,\n    verticalAlign == 'center' && center,\n    verticalAlign == 'bottom' && end,\n  );\n  return createGLSTag(otherProps, klass, 'Horizontal');\n}\nHorizontal.displayName = 'Horizontal';\n","import * as typestyle from 'typestyle';\nimport { GLSProps, SizingProp, StylesProp, ChildPlacementProps, StyleProp } from '../common';\nimport { createGLSTag, useGLSDefaults, processSizingProp } from '../internal/utils';\nimport { vertical, horizontal, centerJustified, endJustified, end, center } from '../styles/flex';\nimport { verticallySpaced, horizontallySpaced } from '../styles/spacing';\n\n\n/** \n * Props that can be specified at root of `Responsive` and overridden for `vertical`/`horizontal` options\n */\nexport interface ResponsiveOverridableProps extends\n  SizingProp,\n  ChildPlacementProps {\n}\n\n/** \n * Props per mode (vertical/horizontal)\n */\nexport interface ResponsiveModeProps extends\n  StyleProp,\n  StylesProp,\n  ResponsiveOverridableProps {\n}\n\n/** \n * Props for the Responsive component\n */\nexport interface ResponsiveProps extends GLSProps, ResponsiveOverridableProps {\n  /** \n   * windowWidth <= breakpoint : it is vertical (mobile)\n   * else                      : it is horizontal (desktop)\n   **/\n  breakpoint?: number;\n\n  /** Vertical mode configuration */\n  vertical?: ResponsiveModeProps;\n\n  /** Horizontal mode configuration */\n  horizontal?: ResponsiveModeProps;\n}\n\n/**\n * Layout out children\n * - vertically till breakpoint\n * - horizontally above breakpoint\n */\nexport const Responsive: React.FC<ResponsiveProps> = (props) => {\n  const {\n    verticalSpacing: defaultVerticalSpacing,\n    horizontalSpacing: defaultHorizontalSpacing,\n    breakpoint: bp\n  } = useGLSDefaults();\n\n  const {\n    breakpoint = bp,\n    vertical: verticalOptions,\n    horizontal: horizontalOptions,\n\n    /** Overridable */\n    sizing,\n    spacing,\n    verticalAlign,\n    horizontalAlign,\n\n    ...otherProps\n  } = props;\n\n  /** Determine sizings */\n  const verticalSizing = (verticalOptions && verticalOptions.sizing != null)\n    ? verticalOptions.sizing\n    : sizing;\n  const horizontalSizing = (horizontalOptions && horizontalOptions.sizing != null)\n    ? horizontalOptions.sizing\n    : sizing;\n\n  /** Determine spacings  */\n  const verticalSpacing = (verticalOptions && verticalOptions.spacing != null) ? verticalOptions.spacing\n    : spacing != null ? spacing\n      : defaultVerticalSpacing;\n  const horizontalSpacing = (horizontalOptions && horizontalOptions.spacing != null) ? horizontalOptions.spacing\n    : spacing != null ? spacing\n      : defaultHorizontalSpacing;\n\n  /** Determine alignments */\n  const verticalModeVerticalAlign =\n    (verticalOptions && verticalOptions.verticalAlign != null) ? verticalOptions.verticalAlign\n      : verticalAlign != null ? verticalAlign\n        : null;\n  const verticalModeHorizontalAlign =\n    (verticalOptions && verticalOptions.horizontalAlign != null) ? verticalOptions.horizontalAlign\n      : horizontalAlign != null ? horizontalAlign\n        : null;\n  const horizontalModeVerticalAlign =\n    (horizontalOptions && horizontalOptions.verticalAlign != null) ? horizontalOptions.verticalAlign\n      : verticalAlign != null ? verticalAlign\n        : null;\n  const horizontalModeHorizontalAlign =\n    (horizontalOptions && horizontalOptions.horizontalAlign != null) ? horizontalOptions.horizontalAlign\n      : horizontalAlign != null ? horizontalAlign\n        : null;\n\n  const klass = typestyle.style(\n    /** Till breakpoint: Vertical */\n    typestyle.media({ minWidth: 0, maxWidth: breakpoint },\n      processSizingProp({ sizing: verticalSizing }),\n      vertical,\n      verticalSpacing !== 0 && verticallySpaced(verticalSpacing),\n      verticalModeVerticalAlign == 'center' && centerJustified,\n      verticalModeVerticalAlign == 'bottom' && endJustified,\n      verticalModeHorizontalAlign == 'right' && end,\n      verticalModeHorizontalAlign == 'center' && center,\n      verticalOptions && verticalOptions.style,\n    ),\n    verticalOptions && verticalOptions.styles && typestyle.media({ minWidth: 0, maxWidth: breakpoint },\n      ...verticalOptions.styles),\n\n    /** Bigger than breakpoint: Horizontal */\n    typestyle.media({ minWidth: breakpoint + 1 },\n      processSizingProp({ sizing: horizontalSizing }),\n      horizontal,\n      horizontalSpacing !== 0 && horizontallySpaced(horizontalSpacing),\n      horizontalModeHorizontalAlign == 'right' && endJustified,\n      horizontalModeHorizontalAlign == 'center' && centerJustified,\n      horizontalModeVerticalAlign == 'center' && center,\n      horizontalModeVerticalAlign == 'bottom' && end,\n      horizontalOptions && horizontalOptions.style,\n    ),\n    horizontalOptions && horizontalOptions.styles && typestyle.media({ minWidth: breakpoint + 1 },\n      ...horizontalOptions.styles),\n  );\n  return createGLSTag(otherProps, klass, 'Responsive');\n}\nResponsive.displayName = 'Responsive';\n","import * as typestyle from 'typestyle';\nimport * as React from 'react';\nimport { CSSLength, GLSProps, SizingProp } from '../common';\nimport { createGLSTag, useGLSDefaults, processSizingProp } from '../internal/utils';\nimport { horizontal, wrap, endJustified, centerJustified, betweenJustified, aroundJustified } from '../styles/flex';\nimport { gridSpaced } from '../styles/spacing';\n\nexport interface GridProps extends GLSProps, SizingProp {\n  /** \n   * Minimum spacing between children\n   */\n  spacing?:\n  | CSSLength\n  | [/** Vertical */ CSSLength, /** Horizontal */ CSSLength]\n\n  /** \n   * Controls how the extra space around the children is handled\n   */\n  justify?:\n  /** Controls by content */\n  | 'left' /** default */\n  | 'center'\n  | 'right'\n  /** Controls by space */\n  | 'space-between'\n  | 'space-around'\n}\n\n/** \n * Lays out children with a margin between them (horizontal and vertical)\n */\nexport const Grid: React.FC<GridProps> = (props) => {\n  const {\n    sizing,\n    spacing,\n    justify,\n    ...otherProps } = props;\n\n  /** \n   * Figure out the spacing requested \n   */\n  let { verticalSpacing, horizontalSpacing } = useGLSDefaults();\n  if (spacing != null) {\n    if (typeof spacing == 'number' || typeof spacing == 'string') {\n      horizontalSpacing = spacing;\n      verticalSpacing = horizontalSpacing;\n    } else {\n      [verticalSpacing, horizontalSpacing] = spacing;\n    }\n  }\n\n  const klass = typestyle.style(\n    processSizingProp(props),\n    horizontal, wrap,\n    gridSpaced(verticalSpacing, horizontalSpacing),\n    justify == 'center' && centerJustified,\n    justify == 'right' && endJustified,\n    justify == 'space-between' && betweenJustified,\n    justify == 'space-around' && aroundJustified,\n  );\n  return (\n    createGLSTag(otherProps, klass, 'Grid')\n  );\n}\nGrid.displayName = 'Grid';\n","import * as typestyle from 'typestyle';\nimport * as React from 'react';\nimport { CSSLength } from '../common';\nimport { cssLengthToString, useGLSDefaults } from '../internal/utils';\nimport { flex } from '../styles/flex';\n\nexport interface FlexSpacerProps extends React.HTMLProps<HTMLDivElement> {\n  flex?: number;\n}\n\n/** \n * Flexes into any available space \n */\nexport const FlexSpacer: React.FC<FlexSpacerProps> = (props) => {\n  const { className, flex: fx, ...otherProps } = props;\n  const klass = typestyle.classes(\n    className,\n    typestyle.style(flex(fx))\n  );\n  return (\n    <div {...otherProps} className={klass} data-comment='FlexSpacer' />\n  );\n};\nFlexSpacer.displayName = 'FlexSpacer';\n\n/** \n * Common interface for space props \n */\nexport interface SpacerProps extends React.HTMLProps<HTMLDivElement> {\n  space?: CSSLength;\n}\n\n/**\n * Takes a fixed amount of horizontal space\n */\nexport const HorizontalSpacer: React.FC<SpacerProps> = (props) => {\n  const { style, ...otherProps } = props;\n  const { horizontalSpacing } = useGLSDefaults();\n  const width = cssLengthToString(props.space == null ? horizontalSpacing : props.space);\n  const styles: React.CSSProperties = {\n    display: 'inline-block',\n    width: width,\n    ...style\n  };\n  return <div {...otherProps} style={styles} data-comment='HorizontalSpacer' />;\n};\nHorizontalSpacer.displayName = 'HorizontalSpacer';\n\n\n/**\n * Takes a fixed amount of vertical space\n */\nexport const VerticalSpacer: React.FC<SpacerProps> = (props) => {\n  const { style, ...otherProps } = props;\n  const { verticalSpacing } = useGLSDefaults();\n  const height = cssLengthToString(props.space == null ? verticalSpacing : props.space);\n  const styles: React.CSSProperties = {\n    height: height,\n    ...style\n  };\n  return <div {...otherProps} style={styles} data-comment='VerticalSpacer' />;\n};\nVerticalSpacer.displayName = 'VerticalSpacer';\n","/** Common */\nexport * from './common';\n\n/** Components */\nexport * from './components/containers';\nexport * from './components/vertical';\nexport * from './components/horizontal';\nexport * from './components/responsive';\nexport * from './components/grid';\nexport * from './components/spacers';\n"],"sourceRoot":""}