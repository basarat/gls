{"version":3,"sources":["/home/travis/build/basarat/gls/src/demos/index.tsx","/home/travis/build/basarat/gls/src/docs/principles/scrolling.mdx"],"names":["BlueDiv","props","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","style","backgroundColor","children","PinkDiv","labelClass","typestyle","Label","className","inputClass","width","fontSize","Input","_props","buttonClass","fontFamily","cursor","height","padding","border","borderRadius","color","textDecoration","lineHeight","outline","transition","display","$nest","&:hover","&:active","&:focus","outlineColor","Button","otherProps","Object","_home_travis_build_basarat_gls_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","assign","type","layoutProps","MDXLayout","MDXContent","_ref","components","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","mdxType","id","parentName","docz__WEBPACK_IMPORTED_MODULE_3__","__position","__code","__scope","this","Playground","Vertical","Content","demos","___WEBPACK_IMPORTED_MODULE_4__","href","scroll","spacing","textAlign","sizing","isMDXComponent"],"mappings":"+iBAOaA,EAAoB,SAACC,GAAD,OAAWC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,gBAAiB,gBAAkBC,SAAUN,EAAMM,0MACtG,IAAMC,EAAoB,SAACP,GAAD,OAAWC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,gBAAiB,aAAeC,SAAUN,EAAMM,0MAK1G,IAAME,EAAaC,QAAgB,IAEtBC,EAAkB,SAACV,GAC9B,OAAOC,EAAAC,EAAAC,cAAA,SAAOQ,UAAWH,EAAYF,SAAUN,EAAMM,wMAMvD,IAAMM,EAAaH,QAAgB,CACjCI,MAAO,mBACPC,SAAU,SAECC,EAAkB,SAACC,GAC9B,OAAOf,EAAAC,EAAAC,cAAA,SAAOQ,UAAWC,iMAMpB,IAAMK,EAAcR,QACzB,CACES,WAAY,YACZC,OAAQ,UACRC,OAAQ,OACRC,QAAS,iBACTC,OAAM,iBACNC,aAAc,MACdC,MAAK,QACLnB,gBAAiB,OACjBS,SAAU,OACVW,eAAgB,OAChBC,WAAY,MACZC,QAAS,OACTC,WAAY,kCACZC,QAAS,eACTC,MAAO,CACLC,UAAW,CACT1B,gBAAiB,QAEnB2B,WAAY,CACV3B,gBAAiB,QAEnB4B,UAAW,CACTN,QAAS,cACTO,aAAY,6MAIb,IAAMC,EACT,SAACnC,GACoCA,EAA7BW,UADuC,IACzByB,EADyBC,OAAAC,EAAA,EAAAD,CACVrC,EADU,eAE/C,OACEC,EAAAC,EAAAC,cAAA,SAAAkC,OAAAE,OAAA,GAAYH,EAAZ,CACEI,KAAK,SACL7B,UAAWF,UAAkBQ,EAAajB,EAAMW,4mBCvDlD8B,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACG7C,EACFqC,OAAAC,EAAA,EAAAD,CAAAO,EAAA,gBACD,OAAOP,OAAAS,EAAA,EAAAT,CAACK,EAADL,OAAAE,OAAA,GAAeE,EAAiBzC,EAAhC,CAAuC6C,WAAYA,EAAYE,QAAQ,cAE5EV,OAAAS,EAAA,EAAAT,CAAA,KAAQ,CACNW,GAAM,aADR,aAGAX,OAAAS,EAAA,EAAAT,CAAA,qLACAA,OAAAS,EAAA,EAAAT,CAAA,WAAKA,OAAAS,EAAA,EAAAT,CAAA,OAAAA,OAAAE,OAAA,CAAMU,WAAW,OAAU,CAC5BtC,UAAa,gBADZ,+IAWL0B,OAAAS,EAAA,EAAAT,CAAA,KAAQ,CACNW,GAAM,YADR,YAGAX,OAAAS,EAAA,EAAAT,CAAA,6LACAA,OAAAS,EAAA,EAAAT,CAACa,EAAA,EAAD,CAAYC,WAAY,EAAGC,OAAQ,uaAAgbC,QAAS,CAC1drD,MAAOsD,KAAOA,KAAKtD,MAAQA,EAC3BuD,eACAC,aACAC,YACAC,SACCX,QAAQ,cAIbV,OAAAS,EAAA,EAAAT,CAACsB,EAAA,EAAD,CAAUvC,OAAQ,GAAIhB,MAAO,CACvBC,gBAAiB,gBAChB0C,QAAQ,YACbV,OAAAS,EAAA,EAAAT,CAAA,OAAKjC,MAAO,CACNC,gBAAiB,cADvB,uCAGAgC,OAAAS,EAAA,EAAAT,CAAA,OAAKjC,MAAO,CACNC,gBAAiB,cADvB,uCAGAgC,OAAAS,EAAA,EAAAT,CAAA,OAAKjC,MAAO,CACNC,gBAAiB,cADvB,yCAKAgC,OAAAS,EAAA,EAAAT,CAAA,+EAA0EA,OAAAS,EAAA,EAAAT,CAAA,MAAIY,WAAW,KAAf,6BAA1E,oBAAoJZ,OAAAS,EAAA,EAAAT,CAAA,IAAAA,OAAAE,OAAA,CAAGU,WAAW,KAAQ,CACtKW,KAAQ,yBADwI,oBAApJ,gHAGAvB,OAAAS,EAAA,EAAAT,CAAA,KAAQ,CACNW,GAAM,8BADR,gCAGAX,OAAAS,EAAA,EAAAT,CAAA,gBAAWA,OAAAS,EAAA,EAAAT,CAAA,cAAYY,WAAW,KAAvB,6CAAX,iEACAZ,OAAAS,EAAA,EAAAT,CAAA,iDACAA,OAAAS,EAAA,EAAAT,CAAA,UACEA,OAAAS,EAAA,EAAAT,CAAA,MAAIY,WAAW,MAAf,kEACAZ,OAAAS,EAAA,EAAAT,CAAA,MAAIY,WAAW,MAAf,0DAEFZ,OAAAS,EAAA,EAAAT,CAAA,gEACAA,OAAAS,EAAA,EAAAT,CAACa,EAAA,EAAD,CAAYC,WAAY,EAAGC,OAAQ,yPAA8PC,QAAS,CACxSrD,MAAOsD,KAAOA,KAAKtD,MAAQA,EAC3BuD,eACAC,aACAC,YACAC,SACCX,QAAQ,cAIbV,OAAAS,EAAA,EAAAT,CAACsB,EAAA,EAAD,CAAUvC,OAAQ,GAAIyC,OAAO,OAAOzD,MAAO,CACrCC,gBAAiB,gBAChB0C,QAAQ,YACbV,OAAAS,EAAA,EAAAT,CAAA,OAAKjC,MAAO,CACNC,gBAAiB,cADvB,0CAKAgC,OAAAS,EAAA,EAAAT,CAAA,6DACAA,OAAAS,EAAA,EAAAT,CAACa,EAAA,EAAD,CAAYC,WAAY,EAAGC,OAAQ,kcAA2cC,QAAS,CACrfrD,MAAOsD,KAAOA,KAAKtD,MAAQA,EAC3BuD,eACAC,aACAC,YACAC,SACCX,QAAQ,cAIbV,OAAAS,EAAA,EAAAT,CAACsB,EAAA,EAAD,CAAUvC,OAAQ,GAAIyC,OAAO,OAAOzD,MAAO,CACrCC,gBAAiB,gBAChB0C,QAAQ,YACbV,OAAAS,EAAA,EAAAT,CAAA,OAAKjC,MAAO,CACNC,gBAAiB,cADvB,uCAGAgC,OAAAS,EAAA,EAAAT,CAAA,OAAKjC,MAAO,CACNC,gBAAiB,cADvB,uCAGAgC,OAAAS,EAAA,EAAAT,CAAA,OAAKjC,MAAO,CACNC,gBAAiB,cADvB,yCAKAgC,OAAAS,EAAA,EAAAT,CAAA,8HACAA,OAAAS,EAAA,EAAAT,CAACa,EAAA,EAAD,CAAYC,WAAY,EAAGC,OAAQ,kxCAA2yCC,QAAS,CACr1CrD,MAAOsD,KAAOA,KAAKtD,MAAQA,EAC3BuD,eACAC,aACAC,YACAC,SACCX,QAAQ,cACbV,OAAAS,EAAA,EAAAT,CAACsB,EAAA,EAAD,CAAUvC,OAAQ,IAAK0C,QAAS,EAAG1D,MAAO,CACpCC,gBAAiB,gBAChB0C,QAAQ,YAITV,OAAAS,EAAA,EAAAT,CAACsB,EAAA,EAAD,CAASvD,MAAO,CACdC,gBAAiB,aACjB0D,UAAW,SACX3C,OAAQ,OACRN,SAAU,QACTiC,QAAQ,WALX,UAUAV,OAAAS,EAAA,EAAAT,CAACsB,EAAA,EAAD,CAAUE,OAAO,OAAOG,OAAO,OAAOjB,QAAQ,YACpDV,OAAAS,EAAA,EAAAT,CAAA,OAAKjC,MAAO,CACFC,gBAAiB,cAD3B,sDAGAgC,OAAAS,EAAA,EAAAT,CAAA,OAAKjC,MAAO,CACFC,gBAAiB,cAD3B,sDAGAgC,OAAAS,EAAA,EAAAT,CAAA,OAAKjC,MAAO,CACFC,gBAAiB,cAD3B,sDAGAgC,OAAAS,EAAA,EAAAT,CAAA,OAAKjC,MAAO,CACFC,gBAAiB,cAD3B,sDAGAgC,OAAAS,EAAA,EAAAT,CAAA,OAAKjC,MAAO,CACFC,gBAAiB,cAD3B,sDAGAgC,OAAAS,EAAA,EAAAT,CAAA,OAAKjC,MAAO,CACFC,gBAAiB,cAD3B,sDAGAgC,OAAAS,EAAA,EAAAT,CAAA,OAAKjC,MAAO,CACFC,gBAAiB,cAD3B,yDAMEgC,OAAAS,EAAA,EAAAT,CAAA,KAAQ,CACNW,GAAM,UADR,UAGAX,OAAAS,EAAA,EAAAT,CAAA,yHACAA,OAAAS,EAAA,EAAAT,CAACa,EAAA,EAAD,CAAYC,WAAY,EAAGC,OAAQ,4gBAAqhBC,QAAS,CAC/jBrD,MAAOsD,KAAOA,KAAKtD,MAAQA,EAC3BuD,eACAC,aACAC,YACAC,SACCX,QAAQ,cAIbV,OAAAS,EAAA,EAAAT,CAACsB,EAAA,EAAD,CAAUvC,OAAQ,GAAIyC,OAAO,SAASzD,MAAO,CACvCC,gBAAiB,gBAChB0C,QAAQ,YACbV,OAAAS,EAAA,EAAAT,CAAA,OAAKjC,MAAO,CACNC,gBAAiB,cADvB,+DAGAgC,OAAAS,EAAA,EAAAT,CAAA,OAAKjC,MAAO,CACNC,gBAAiB,cADvB,+DAGAgC,OAAAS,EAAA,EAAAT,CAAA,OAAKjC,MAAO,CACNC,gBAAiB,cADvB,yPASJsC,EAAWsB,gBAAiB","file":"static/js/src-docs-principles-scrolling.a4191939.js","sourcesContent":["/** \n * Demo components for docs \n */\n\nimport React from \"react\";\nimport * as typestyle from \"typestyle\";\n\nexport const BlueDiv: React.FC = (props) => <div style={{ backgroundColor: \"lightskyblue\" }} children={props.children} />;\nexport const PinkDiv: React.FC = (props) => <div style={{ backgroundColor: \"lightpink\" }} children={props.children} />;\n\n/** \n * Label \n */\nconst labelClass = typestyle.style({\n});\nexport const Label: React.FC = (props) => {\n  return <label className={labelClass} children={props.children} />;\n}\n\n/** \n * Input\n */\nconst inputClass = typestyle.style({\n  width: 'calc(100% - 5px)' /** Docz weirdness */,\n  fontSize: '20px',\n});\nexport const Input: React.FC = (_props) => {\n  return <input className={inputClass} />;\n}\n\n/** \n * Button \n */\nexport const buttonClass = typestyle.style(\n  {\n    fontFamily: 'helvetica',\n    cursor: 'pointer',\n    height: 'auto',\n    padding: \"12px 30px 11px\",\n    border: `1px solid #333`,\n    borderRadius: '3px',\n    color: `white`,\n    backgroundColor: '#333',\n    fontSize: '15px',\n    textDecoration: \"none\",\n    lineHeight: \"1em\",\n    outline: 'none',\n    transition: 'color .2s, background-color .2s',\n    display: 'inline-block',\n    $nest: {\n      '&:hover': {\n        backgroundColor: '#666',\n      },\n      '&:active': {\n        backgroundColor: '#666',\n      },\n      '&:focus': {\n        outline: 'thin dotted',\n        outlineColor: `#333`\n      }\n    }\n  });\nexport const Button\n  = (props: React.HTMLProps<HTMLButtonElement>) => {\n    const { className, ...otherProps } = props;\n    return (\n      <button {...otherProps}\n        type=\"button\"\n        className={typestyle.classes(buttonClass, props.className)}\n      />\n    );\n  };\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground } from 'docz';\nimport { Vertical, Content } from '../..'; \nimport * as demos from '../../demos'; \n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"scrolling\"\n    }}>{`Scrolling`}</h1>\n    <p>{`Setting up when a scroll bar should show is not particularly hard, but worth covering. We provide the following scrolling options as a prop to our container components:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`export interface ScrollProp {\n  scroll?:\n  | 'overflow' /** default */\n  | 'both'\n  | 'vertical'\n  | 'horizontal'\n  | 'hidden';\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"overflow\"\n    }}>{`overflow`}</h2>\n    <p>{`By default content will overflow its container. In the example below we force the container to be small (with explicit sizing 80px) and then throw a bunch of content inside it.`}</p>\n    <Playground __position={0} __code={'{/* force a small size container */}\\n<Vertical height={80} style={{ backgroundColor: \\'lightskyblue\\' }}>\\n  <div style={{ backgroundColor: \\'lightpink\\' }}>\\n    Lots of content to make it overflow\\n  </div>\\n  <div style={{ backgroundColor: \\'lightpink\\' }}>\\n    Lots of content to make it overflow\\n  </div>\\n  <div style={{ backgroundColor: \\'lightpink\\' }}>\\n    Lots of content to make it overflow\\n  </div>\\n</Vertical>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Content,\n      demos\n    }} mdxType=\"Playground\">\n  {\n        /* force a small size container */\n      }\n  <Vertical height={80} style={{\n        backgroundColor: \"lightskyblue\"\n      }} mdxType=\"Vertical\">\n    <div style={{\n          backgroundColor: 'lightpink'\n        }}>Lots of content to make it overflow</div>\n    <div style={{\n          backgroundColor: 'lightpink'\n        }}>Lots of content to make it overflow</div>\n    <div style={{\n          backgroundColor: 'lightpink'\n        }}>Lots of content to make it overflow</div>\n  </Vertical>\n    </Playground>\n    <p>{`There is no need to be alarmed by this default value. You normally `}<em parentName=\"p\">{`don't use explicit sizing`}</em>{` (covered in the `}<a parentName=\"p\" {...{\n        \"href\": \"../principle-sizing/\"\n      }}>{`sizing principle`}</a>{`). Content will overflow to the body, and the browser will add a scrollbar on the body for you (by default).`}</p>\n    <h2 {...{\n      \"id\": \"both--vertical--horizontal\"\n    }}>{`both | vertical | horizontal`}</h2>\n    <p>{`Add `}<inlineCode parentName=\"p\">{`scroll: 'both'| 'vertical' | 'horizontal'`}</inlineCode>{` to finely control where you want your scroll bar to appear. `}</p>\n    <p>{`Some configuration handled for you: `}</p>\n    <ul>\n      <li parentName=\"ul\">{`The scrollbar will only show if the content actually overflow.`}</li>\n      <li parentName=\"ul\">{`The scrolling section is touch-smooth-scroll enabled.`}</li>\n    </ul>\n    <p>{`Here is an example where content doesn't overflow: `}</p>\n    <Playground __position={1} __code={'{/* force a small size container */}\\n<Vertical\\n  height={80}\\n  scroll=\\\"both\\\"\\n  style={{ backgroundColor: \\'lightskyblue\\' }}\\n>\\n  <div style={{ backgroundColor: \\'lightpink\\' }}>\\n    Not enough content to cause overflow\\n  </div>\\n</Vertical>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Content,\n      demos\n    }} mdxType=\"Playground\">\n  {\n        /* force a small size container */\n      }\n  <Vertical height={80} scroll='both' style={{\n        backgroundColor: \"lightskyblue\"\n      }} mdxType=\"Vertical\">\n    <div style={{\n          backgroundColor: 'lightpink'\n        }}>Not enough content to cause overflow</div>\n  </Vertical>\n    </Playground>\n    <p>{`Here is an example where content does overflow: `}</p>\n    <Playground __position={2} __code={'{/* force a small size container */}\\n<Vertical\\n  height={80}\\n  scroll=\\\"both\\\"\\n  style={{ backgroundColor: \\'lightskyblue\\' }}\\n>\\n  <div style={{ backgroundColor: \\'lightpink\\' }}>\\n    Lots of content to make it overflow\\n  </div>\\n  <div style={{ backgroundColor: \\'lightpink\\' }}>\\n    Lots of content to make it overflow\\n  </div>\\n  <div style={{ backgroundColor: \\'lightpink\\' }}>\\n    Lots of content to make it overflow\\n  </div>\\n</Vertical>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Content,\n      demos\n    }} mdxType=\"Playground\">\n  {\n        /* force a small size container */\n      }\n  <Vertical height={80} scroll='both' style={{\n        backgroundColor: \"lightskyblue\"\n      }} mdxType=\"Vertical\">\n    <div style={{\n          backgroundColor: 'lightpink'\n        }}>Lots of content to make it overflow</div>\n    <div style={{\n          backgroundColor: 'lightpink'\n        }}>Lots of content to make it overflow</div>\n    <div style={{\n          backgroundColor: 'lightpink'\n        }}>Lots of content to make it overflow</div>\n  </Vertical>\n    </Playground>\n    <p>{`You can use it to fine tune the scroll bar location e.g. below we want the header to stay outside the scroll bar:`}</p>\n    <Playground __position={3} __code={'<Vertical\\n  height={200}\\n  spacing={0}\\n  style={{ backgroundColor: \\'lightskyblue\\' }}\\n>\\n  {/* You want this header to stick to top */}\\n  <Content\\n    style={{\\n      backgroundColor: \\'darkorange\\',\\n      textAlign: \\'center\\',\\n      height: \\'50px\\',\\n      fontSize: \\'35px\\',\\n    }}\\n  >\\n    Header\\n  </Content>\\n\\n  {/* You only want this section to scroll */}\\n  <Vertical scroll=\\\"both\\\" sizing=\\\"flex\\\">\\n    <div style={{ backgroundColor: \\'lightpink\\' }}>\\n      Main section with lots of text to make it overflow\\n    </div>\\n    <div style={{ backgroundColor: \\'lightpink\\' }}>\\n      Main section with lots of text to make it overflow\\n    </div>\\n    <div style={{ backgroundColor: \\'lightpink\\' }}>\\n      Main section with lots of text to make it overflow\\n    </div>\\n    <div style={{ backgroundColor: \\'lightpink\\' }}>\\n      Main section with lots of text to make it overflow\\n    </div>\\n    <div style={{ backgroundColor: \\'lightpink\\' }}>\\n      Main section with lots of text to make it overflow\\n    </div>\\n    <div style={{ backgroundColor: \\'lightpink\\' }}>\\n      Main section with lots of text to make it overflow\\n    </div>\\n    <div style={{ backgroundColor: \\'lightpink\\' }}>\\n      Main section with lots of text to make it overflow\\n    </div>\\n  </Vertical>\\n</Vertical>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Content,\n      demos\n    }} mdxType=\"Playground\">\n  <Vertical height={200} spacing={0} style={{\n        backgroundColor: \"lightskyblue\"\n      }} mdxType=\"Vertical\">\n        {\n          /* You want this header to stick to top */\n        }\n        <Content style={{\n          backgroundColor: 'darkorange',\n          textAlign: 'center',\n          height: '50px',\n          fontSize: '35px'\n        }} mdxType=\"Content\">Header</Content>\n\n        {\n          /* You only want this section to scroll */\n        }\n        <Vertical scroll='both' sizing='flex' mdxType=\"Vertical\">\n  <div style={{\n            backgroundColor: 'lightpink'\n          }}>Main section with lots of text to make it overflow</div>\n  <div style={{\n            backgroundColor: 'lightpink'\n          }}>Main section with lots of text to make it overflow</div>\n  <div style={{\n            backgroundColor: 'lightpink'\n          }}>Main section with lots of text to make it overflow</div>\n  <div style={{\n            backgroundColor: 'lightpink'\n          }}>Main section with lots of text to make it overflow</div>\n  <div style={{\n            backgroundColor: 'lightpink'\n          }}>Main section with lots of text to make it overflow</div>\n  <div style={{\n            backgroundColor: 'lightpink'\n          }}>Main section with lots of text to make it overflow</div>\n  <div style={{\n            backgroundColor: 'lightpink'\n          }}>Main section with lots of text to make it overflow</div>\n        </Vertical>\n  </Vertical>\n    </Playground>\n    <h2 {...{\n      \"id\": \"hidden\"\n    }}>{`hidden`}</h2>\n    <p>{`It behaves exactly like you would expect, cutting off overflowing content and not letting you scroll to it: `}</p>\n    <Playground __position={4} __code={'{/* force a small size container */}\\n<Vertical\\n  height={80}\\n  scroll=\\\"hidden\\\"\\n  style={{ backgroundColor: \\'lightskyblue\\' }}\\n>\\n  <div style={{ backgroundColor: \\'lightpink\\' }}>\\n    Lots of content to make it overflow, but it will get hidden\\n  </div>\\n  <div style={{ backgroundColor: \\'lightpink\\' }}>\\n    Lots of content to make it overflow, but it will get hidden\\n  </div>\\n  <div style={{ backgroundColor: \\'lightpink\\' }}>\\n    Lots of content to make it overflow, but it will get hidden\\n  </div>\\n</Vertical>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Content,\n      demos\n    }} mdxType=\"Playground\">\n  {\n        /* force a small size container */\n      }\n  <Vertical height={80} scroll='hidden' style={{\n        backgroundColor: \"lightskyblue\"\n      }} mdxType=\"Vertical\">\n    <div style={{\n          backgroundColor: 'lightpink'\n        }}>Lots of content to make it overflow, but it will get hidden</div>\n    <div style={{\n          backgroundColor: 'lightpink'\n        }}>Lots of content to make it overflow, but it will get hidden</div>\n    <div style={{\n          backgroundColor: 'lightpink'\n        }}>Lots of content to make it overflow, but it will get hidden</div>\n  </Vertical>\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}