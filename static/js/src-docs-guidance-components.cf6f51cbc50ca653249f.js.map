{"version":3,"sources":["/home/travis/build/basarat/gls/src/docs/guidance/components.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","this","Playground","Content","Vertical","Horizontal","Responsive","demos","size","placeholder","breakpoint","sizing","width","isMDXComponent"],"mappings":"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","file":"static/js/src-docs-guidance-components.6fe9137f.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground } from 'docz';\nimport { Content, Vertical, Horizontal, Responsive } from '../..'; \nimport * as demos from '../../demos'; \n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <demos.Star />\n    <h1 {...{\n      \"id\": \"component-concepts\"\n    }}>{`Component Concepts`}</h1>\n    <blockquote>\n      <p parentName=\"blockquote\">{`This section is in a `}<a parentName=\"p\" {...{\n          \"href\": \"../guidance/\"\n        }}>{`series of sections that provide further guidance for success`}</a>{`.`}</p>\n    </blockquote>\n    <p>{`Following the `}<a parentName=\"p\" {...{\n        \"href\": \"../principle-sizing/\"\n      }}>{`sizing principle`}</a>{` there are three categories of `}<strong parentName=\"p\">{`defaults`}</strong>{` you should follow in components `}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#explicit-size\"\n        }}>{`Explicit Size`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#content-sizing\"\n        }}>{`Content Sizing`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#stretch-sizing\"\n        }}>{`Stretch Sizing`}</a></li>\n    </ul>\n    <p>{`All of these can be supported by your component using `}<a parentName=\"p\" {...{\n        \"href\": \"../component/\"\n      }}>{`the `}<inlineCode parentName=\"a\">{`gls.component`}</inlineCode>{` function`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"explicit-size\"\n    }}>{`Explicit Size`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If a component exists to present an explicitly sized piece of information, then it should take explicit `}<inlineCode parentName=\"p\">{`SizeProps`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <p>{`Explicit size is rare, but still plays an active part in UI design. `}</p>\n    <p>{`An example would be a profile display picture component where you want to set the width and the height to ensure the image takes up a particular space even before the image (content) is loaded. Notice the explicit `}<inlineCode parentName=\"p\">{`width`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`height`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`style`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`export const DemoProfile: React.FC<{ size: number }> = ({ size }) => {\n  return (\n    <img\n      style={{\n        borderRadius: '50%',\n        // Explicit size\n        width: \\`\\${size}px\\`,\n        height: \\`\\${size}px\\`,\n      }}\n      src={\\`http://placekitten.com/g/\\${size}/\\${size}\\`} />\n  );\n}\n`}</code></pre>\n    <Playground __position={1} __code={'<demos.DemoProfile size={100} />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Content,\n      Vertical,\n      Horizontal,\n      Responsive,\n      demos\n    }} mdxType=\"Playground\">\n  <demos.DemoProfile size={100} />\n    </Playground>\n    <h2 {...{\n      \"id\": \"content-sizing\"\n    }}>{`Content Sizing`}</h2>\n    <p>{`Content sizing is the most common form of sizing in designs out there. `}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If a component exists only to present the `}<strong parentName=\"p\">{`dynamic amount of content`}</strong>{` it contains, then it should be `}<em parentName=\"p\">{`content`}</em>{` by default.`}</p>\n    </blockquote>\n    <p>{`You normally don't need to do anything special for the browsers to reliably size your items by content. Adding an explicit `}<inlineCode parentName=\"p\">{`sizing: 'content'`}</inlineCode>{` does help with flex-box bugs though and `}<inlineCode parentName=\"p\">{`gls.component`}</inlineCode>{` function does that. `}</p>\n    <p>{`Examples: `}</p>\n    <ul>\n      <li parentName=\"ul\">{`Links (`}<inlineCode parentName=\"li\">{`a`}</inlineCode>{`)`}</li>\n      <li parentName=\"ul\">{`Buttons (`}<inlineCode parentName=\"li\">{`button`}</inlineCode>{`)`}</li>\n      <li parentName=\"ul\">{`Typography (`}<inlineCode parentName=\"li\">{`h1,h2,...,p,li,ul`}</inlineCode>{` etc)`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"stretch-sizing\"\n    }}>{`Stretch Sizing`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If a component is going to occupy a significant portion of user's interaction time, then it should be `}<inlineCode parentName=\"p\">{`sizing:'stretch'`}</inlineCode>{` by default. `}</p>\n    </blockquote>\n    <p>{`Examples:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`input`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`select`}</inlineCode>{` `}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`textarea`}</inlineCode></li>\n      <li parentName=\"ul\">{`page body`}</li>\n    </ul>\n    <p>{`As an example consider an input with `}<inlineCode parentName=\"p\">{`sizing:'stretch'`}</inlineCode>{` as default `}<a parentName=\"p\" {...{\n        \"href\": \"../component/\"\n      }}>{`using the `}<inlineCode parentName=\"a\">{`gls.component`}</inlineCode>{` function`}</a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`export interface ExampleInputProps extends\n  React.InputHTMLAttributes<HTMLInputElement>,\n  gls.ComponentProps {\n}\n\nexport const ExampleInput: React.FC<ExampleInputProps> = (props) => {\n  const { className, ...otherProps } =\n    gls.component(props, { sizing: 'stretch' });\n\n  return <input className={className} {...otherProps} />\n};\n`}</code></pre>\n    <p>{`Such an input behaves nicely in common vertical, horizontal and responsive layouts: `}</p>\n    <Playground __position={2} __code={'<Vertical>\\n  <demos.DefaultInput placeholder=\\\"Example\\\" />\\n  <demos.DefaultInput placeholder=\\\"Example\\\" />\\n</Vertical>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Content,\n      Vertical,\n      Horizontal,\n      Responsive,\n      demos\n    }} mdxType=\"Playground\">\n  <Vertical mdxType=\"Vertical\">\n    <demos.DefaultInput placeholder=\"Example\" />\n    <demos.DefaultInput placeholder=\"Example\" />\n  </Vertical>\n    </Playground>\n    <Playground __position={3} __code={'<Horizontal>\\n  <demos.DefaultInput placeholder=\\\"Example\\\" />\\n  <demos.DefaultInput placeholder=\\\"Example\\\" />\\n</Horizontal>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Content,\n      Vertical,\n      Horizontal,\n      Responsive,\n      demos\n    }} mdxType=\"Playground\">\n  <Horizontal mdxType=\"Horizontal\">\n    <demos.DefaultInput placeholder=\"Example\" />\n    <demos.DefaultInput placeholder=\"Example\" />\n  </Horizontal>\n    </Playground>\n    <Playground __position={4} __code={'<Responsive breakpoint={650}>\\n  <demos.DefaultInput placeholder=\\\"Example\\\" />\\n  <demos.DefaultInput placeholder=\\\"Example\\\" />\\n</Responsive>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Content,\n      Vertical,\n      Horizontal,\n      Responsive,\n      demos\n    }} mdxType=\"Playground\">\n  <Responsive breakpoint={650} mdxType=\"Responsive\">\n    <demos.DefaultInput placeholder=\"Example\" />\n    <demos.DefaultInput placeholder=\"Example\" />\n  </Responsive>\n    </Playground>\n    <p>{`You can also provide a sizing ratio e.g. 1-2: `}</p>\n    <Playground __position={5} __code={'<Horizontal>\\n  <demos.DefaultInput placeholder=\\\"Example\\\" sizing={1} />\\n  <demos.DefaultInput placeholder=\\\"Example\\\" sizing={2} />\\n</Horizontal>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Content,\n      Vertical,\n      Horizontal,\n      Responsive,\n      demos\n    }} mdxType=\"Playground\">\n  <Horizontal mdxType=\"Horizontal\">\n    <demos.DefaultInput placeholder=\"Example\" sizing={1} />\n    <demos.DefaultInput placeholder=\"Example\" sizing={2} />\n  </Horizontal>\n    </Playground>\n    <p>{`An even explicit size if you need to, e.g. `}<inlineCode parentName=\"p\">{`width:200px`}</inlineCode>{`: `}</p>\n    <Playground __position={6} __code={'<Horizontal>\\n  <demos.DefaultInput placeholder=\\\"Example\\\" sizing=\\\"content\\\" width={200} />\\n  <demos.DefaultInput placeholder=\\\"Example\\\" sizing=\\\"content\\\" width={200} />\\n</Horizontal>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Content,\n      Vertical,\n      Horizontal,\n      Responsive,\n      demos\n    }} mdxType=\"Playground\">\n  <Horizontal mdxType=\"Horizontal\">\n    <demos.DefaultInput placeholder=\"Example\" sizing='content' width={200} />\n    <demos.DefaultInput placeholder=\"Example\" sizing='content' width={200} />\n  </Horizontal>\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}