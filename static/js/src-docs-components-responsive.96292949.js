(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{"./src/docs/components/responsive.mdx":function(e,o,n){"use strict";n.r(o),n.d(o,"default",function(){return b});var t=n("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),i=(n("./node_modules/react/index.js"),n("./node_modules/@mdx-js/react/dist/index.es.js")),s=n("./node_modules/docz/dist/index.esm.js"),p=n("./src/index.tsx"),r=n("./src/demos/index.tsx"),l={},a="wrapper";function b(e){var o=e.components,n=Object(t.a)(e,["components"]);return Object(i.b)(a,Object.assign({},l,n,{components:o,mdxType:"MDXLayout"}),Object(i.b)(r.Star,null),Object(i.b)("h1",{id:"responsive"},"Responsive"),Object(i.b)("p",null,"Lays out children in a vertically or horizontally spaced layout based on given breakpoint (",Object(i.b)("a",Object.assign({parentName:"p"},{href:"../defaults/"}),"default is 480"),"). "),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"You'll have to resize the browser window to see the following examples in action \ud83d\udc4d")),Object(i.b)("p",null,"As an example, resize your browser window to see the following layout change from horizontal to vertical at 600px:"),Object(i.b)(s.c,{__position:1,__code:"<Responsive breakpoint={600}>\n  <Flex style={{ backgroundColor: 'lightskyblue' }}>Hello</Flex>\n  <Flex style={{ backgroundColor: 'lightpink' }}>World</Flex>\n</Responsive>",__scope:{props:this?this.props:n,Playground:s.c,Responsive:p.h,Flex:p.b,Horizontal:p.f,demos:r},mdxType:"Playground"},Object(i.b)(p.h,{breakpoint:600,mdxType:"Responsive"},Object(i.b)(p.b,{style:{backgroundColor:"lightskyblue"},mdxType:"Flex"},"Hello"),Object(i.b)(p.b,{style:{backgroundColor:"lightpink"},mdxType:"Flex"},"World"))),Object(i.b)("p",null,"Another example is a common (left - right) layout with buttons: "),Object(i.b)(s.c,{__position:2,__code:'<Responsive breakpoint={650} minWidth={250}>\n  <Horizontal sizing="flex">\n    <demos.Button>Back 1</demos.Button>\n    <demos.Button>Back 2</demos.Button>\n  </Horizontal>\n  <Horizontal sizing="flex" horizontalAlign="right">\n    <demos.Button>Next 1</demos.Button>\n    <demos.Button>Next 2</demos.Button>\n  </Horizontal>\n</Responsive>',__scope:{props:this?this.props:n,Playground:s.c,Responsive:p.h,Flex:p.b,Horizontal:p.f,demos:r},mdxType:"Playground"},Object(i.b)(p.h,{breakpoint:650,minWidth:250,mdxType:"Responsive"},Object(i.b)(p.f,{sizing:"flex",mdxType:"Horizontal"},Object(i.b)(r.Button,null,"Back 1"),Object(i.b)(r.Button,null,"Back 2")),Object(i.b)(p.f,{sizing:"flex",horizontalAlign:"right",mdxType:"Horizontal"},Object(i.b)(r.Button,null,"Next 1"),Object(i.b)(r.Button,null,"Next 2")))),Object(i.b)("h1",{id:"props"},"Props"),Object(i.b)("p",null,"Responsive props are categorized into ",Object(i.b)("em",{parentName:"p"},"RootOnly"),", ",Object(i.b)("em",{parentName:"p"},"Overridable")," and ",Object(i.b)("em",{parentName:"p"},"ModeSpecific")," (vertical/horizontal mode)."),Object(i.b)("h2",{id:"responsiveoverridableprops"},"ResponsiveOverridableProps"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-ts"}),"/** \n * Props that can be specified at\n * - root of `Responsive` \n * - and overridden for `vertical`/`horizontal` modes\n */\nexport interface ResponsiveOverridableProps extends\n  ScrollProp,\n  PaddingProp,\n  SizeProps,\n  SizingProp,\n  SpacingProp {\n}\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},Object(i.b)("inlineCode",{parentName:"p"},"ScrollProp"),", ",Object(i.b)("inlineCode",{parentName:"p"},"PaddingProp"),", ",Object(i.b)("inlineCode",{parentName:"p"},"SizeProps"),", ",Object(i.b)("inlineCode",{parentName:"p"},"SizingProp"),", ",Object(i.b)("inlineCode",{parentName:"p"},"SpacingProp")," are all covered ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"../common-types/"}),"in the common props section"),".")),Object(i.b)("p",null,"You can specify these props at the root, and optionally change their values for the specific mode. e.g. below we have a responsive with a default height of ",Object(i.b)("inlineCode",{parentName:"p"},"100px")," but in vertical mode it has a ",Object(i.b)("inlineCode",{parentName:"p"},"height:300px")," (",Object(i.b)("inlineCode",{parentName:"p"},"<Responsive height=100 vertical={height:100}/>"),"): "),Object(i.b)(s.c,{__position:3,__code:"<Responsive\n  breakpoint={600}\n  style={{ backgroundColor: 'lightskyblue' }}\n  height={100}\n  vertical={{ height: 300 }}\n/>",__scope:{props:this?this.props:n,Playground:s.c,Responsive:p.h,Flex:p.b,Horizontal:p.f,demos:r},mdxType:"Playground"},Object(i.b)(p.h,{breakpoint:600,style:{backgroundColor:"lightskyblue"},height:100,vertical:{height:300},mdxType:"Responsive"})),Object(i.b)("h2",{id:"sizingprop"},"SizingProp"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"Responsive")," supports the ",Object(i.b)("inlineCode",{parentName:"p"},"sizing")," prop as explained in the ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"../principle-sizing/"}),"sizing principle"),"."))}b&&b===Object(b)&&Object.isExtensible(b)&&Object.defineProperty(b,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/docs/components/responsive.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=src-docs-components-responsive.62309606b30e9be8d079.js.map