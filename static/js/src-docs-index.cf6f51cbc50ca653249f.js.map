{"version":3,"sources":["/home/travis/build/basarat/gls/src/docs/index.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mYAQMA,EAAc,GAIL,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,YAAC,OAAD,MACA,iBAAQ,CACN,GAAM,yBADR,yBAGA,qBAAG,0BAAYC,WAAW,KAAvB,OAAH,sFACA,yLAAwK,kBAAIA,WAAW,KAAf,UAAxK,kEACA,iBAAQ,CACN,GAAM,gBADR,gBAGA,gCAAe,0BAAYA,WAAW,KAAvB,OAAf,sCAAqG,0BAAYA,WAAW,KAAvB,SAArG,mBAA0K,0BAAYA,WAAW,KAAvB,aAA1K,eACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,gCAIL,iBAAQ,CACN,GAAM,kBADR,kBAGA,uKACA,sBACE,kBAAIA,WAAW,MAAK,+BAAGA,WAAW,MAAS,CACvC,KAAQ,yBADQ,sBAGpB,kBAAIA,WAAW,MAAK,+BAAGA,WAAW,MAAS,CACvC,KAAQ,wBADQ,qBAGpB,kBAAIA,WAAW,MAAK,+BAAGA,WAAW,MAAS,CACvC,KAAQ,2BADQ,yBAItB,iBAAQ,CACN,GAAM,cADR,cAGA,uFAAsE,0BAAYA,WAAW,KAAvB,OAAtE,wLACA,uM,wKAKJJ,EAAWK,gBAAiB","file":"static/js/src-docs-index.6ddd5bfe.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport * as demos from '../demos'; \n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <demos.Star />\n    <h1 {...{\n      \"id\": \"general-layout-system\"\n    }}>{`General Layout System`}</h1>\n    <p><inlineCode parentName=\"p\">{`gls`}</inlineCode>{` is a simple (but powerful) general purpose layout system for React üåπ. `}</p>\n    <p>{`Having been a part of a fair share of component libraries, this library isolates the layout system from past efforts. This library allows you to have a reliable `}<em parentName=\"p\">{`layout`}</em>{` system that can work with any component library ‚ù§Ô∏è.`}</p>\n    <h1 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h1>\n    <p>{`Install `}<inlineCode parentName=\"p\">{`gls`}</inlineCode>{` along with its peer dependencies: `}<inlineCode parentName=\"p\">{`react`}</inlineCode>{` (for html) and `}<inlineCode parentName=\"p\">{`typestyle`}</inlineCode>{` (for css):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`npm i gls react typestyle\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"css-principles\"\n    }}>{`CSS principles`}</h1>\n    <p>{`There are a few key CSS principles developed with gls. These ideas are designed to help build maintainable layouts in the world of components:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"./principle-spacing/\"\n        }}>{`Spacing principle`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"./principle-sizing/\"\n        }}>{`Sizing principle`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"./principle-scrolling/\"\n        }}>{`Scrolling principle`}</a></li>\n    </ul>\n    <h1 {...{\n      \"id\": \"components\"\n    }}>{`Components`}</h1>\n    <p>{`All our components are just browser native react tags (default `}<inlineCode parentName=\"p\">{`div`}</inlineCode>{`) with atomic CSS generated by typestyle. The layout system is powered by pure (and minimal) CSS resulting in high performance while still providing excellent developer ergonomics.`}</p>\n    <p>{`You can now jump to individual docs and demos using the sidebar. View them in order (recommended üëçüèª) or jump to whatever catches your eye üï∂.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}