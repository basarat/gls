{"version":3,"sources":["/home/travis/build/basarat/gls/src/common.tsx","/home/travis/build/basarat/gls/src/styles/scroll.ts","/home/travis/build/basarat/gls/src/internal/utils.ts","/home/travis/build/basarat/gls/src/styles/box.ts","/home/travis/build/basarat/gls/src/components/grid.tsx","/home/travis/build/basarat/gls/src/components/vertical.tsx","/home/travis/build/basarat/gls/src/components/horizontal.tsx","/home/travis/build/basarat/gls/src/components/containers.tsx","/home/travis/build/basarat/gls/src/index.tsx","/home/travis/build/basarat/gls/src/demos/index.tsx","/home/travis/build/basarat/gls/src/vertical.mdx"],"names":["Spacing","vertical","horizontal","grid","scrollBoth","-webkit-overflow-scrolling","overflow","scrollHorizontal","overflowX","scrollVertical","overflowY","scrollDisabled","boxUnitToString","value","toString","processGLSProps","props","scroll","_props$styles","styles","otherProps","Object","objectWithoutProperties","objectSpread","className","typestyle","apply","scrollHelpers","concat","toConsumableArray","createBoxFunction","mapFromBox","a","b","c","d","undefined","padding","top","right","bottom","left","paddingTop","paddingRight","paddingBottom","paddingLeft","border","borderTop","borderRight","borderBottom","borderLeft","width","height","gridSpaced","topAndBottom","leftAndRight","arguments","length","marginTop","marginLeft","&>*","Grid","_processGLSProps","spacing","_props$spacing","slicedToArray","klass","classes","react","assign","data-comment","displayName","Vertical","horizontalAlign","verticalAlign","csstips","Horizontal","Flex","Content","_processGLSProps2","__webpack_require__","__webpack_exports__","vertical_Vertical","horizontal_Horizontal","containers_Flex","BlueDiv","react_default","createElement","style","backgroundColor","children","PinkDiv","layoutProps","MDXLayout","MDXContent","_ref","components","index_es","mdxType","id","index_esm","__position","__code","__scope","this","Playground","Props","demos","src","demos_BlueDiv","isMDXComponent"],"mappings":"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","file":"static/js/src-vertical.cbb1bccd.js","sourcesContent":["import { types } from \"typestyle\";\n\n/** \n * The default spacing used by the layout components \n * You can customize it e.g. \n * ```ts\n * import { Spacing } from 'gls';\n * Spacing.vertical = 30;\n * ```\n */\nexport const Spacing = {\n  vertical: 24,\n  horizontal: 24,\n  grid: {\n    vertical: 24,\n    horizontal: 24,\n  }\n}\n\n/** \n * Example: \n * - 5 (implies 5px)\n * - '5rem'\n */\nexport type BoxUnit = number | string;\n\n/**\n * A box function is something that can take:\n * - all\n * - topAndBottom + leftRight\n * - top + right + bottom + left\n */\nexport interface BoxFunction<T> {\n  (all: BoxUnit): T;\n  (topAndBottom: BoxUnit, leftAndRight: BoxUnit): T;\n  (top: BoxUnit, right: BoxUnit, bottom: BoxUnit, left: BoxUnit): T;\n}\n\n/** \n * Props accepted by all our components \n */\nexport interface GLSProps extends React.HTMLProps<HTMLDivElement> {\n  scroll?: 'both' | 'vertical' | 'horizontal' | 'disabled';\n  styles?: [types.NestedCSSProperties | null | false]\n}\n","/**\n * @module scroll helpers\n */\nimport { types } from 'typestyle';\n\nexport const scrollBoth: types.NestedCSSProperties = {\n  '-webkit-overflow-scrolling': 'touch',\n  overflow: 'auto'\n};\n\nexport const scrollHorizontal: types.NestedCSSProperties = {\n  '-webkit-overflow-scrolling': 'touch',\n  overflowX: 'auto'\n};\n\nexport const scrollVertical: types.NestedCSSProperties = {\n  '-webkit-overflow-scrolling': 'touch',\n  overflowY: 'auto'\n};\n\n/**\n * If you expect a child somewhere down in the tree to scroll\n * you need to tell the browser to prevent a scroll bar. \n * Example use : `parent(scrollDisabled) > child(scroll)`\n */\nexport const scrollDisabled: types.NestedCSSProperties = {\n  overflow: 'hidden'\n};\n","import * as typestyle from 'typestyle';\nimport { BoxUnit, GLSProps } from \"../common\";\nimport * as scrollHelpers from \"../styles/scroll\";\n\n/**\n * For `number` we assume pixels e.g. 5 => '5px'\n * For `string` *you* should provide the unit e.g. '5px'\n */\nexport function boxUnitToString(value: BoxUnit): string {\n  if (typeof value === 'number') {\n    return value.toString() + 'px';\n  }\n  else {\n    return value;\n  }\n}\n\n/** \n * Converts common suppoted props into a `klass` + remainder \n */\nexport function processGLSProps<T extends GLSProps>(props: T): Omit<T, 'scroll' | 'styles'> {\n  const { scroll, styles = [], ...otherProps } = props;\n\n  return {\n    ...otherProps,\n    className: typestyle.classes(\n      props.className,\n      typestyle.style(\n        /** Scroll */\n        props.scroll != null && (\n          props.scroll == 'disabled' ? scrollHelpers.scrollDisabled\n            : props.scroll == 'horizontal' ? scrollHelpers.scrollHorizontal\n              : props.scroll == 'vertical' ? scrollHelpers.scrollVertical\n                : scrollHelpers.scrollBoth\n        ),\n        /** Any user customizations */\n        ...styles,\n      )\n    ),\n  }\n}","import { BoxFunction, BoxUnit } from \"../common\";\nimport { boxUnitToString } from \"../internal/utils\";\n\n/**\n * @param mapFromBox function that expects a full `BoxUnit` set\n * @returns a function that can work with any partial `BoxUnit`\n */\nfunction createBoxFunction<T>(mapFromBox: (a: BoxUnit, b: BoxUnit, c: BoxUnit, d: BoxUnit) => T): BoxFunction<T> {\n  const result: BoxFunction<T> = (a: BoxUnit, b?: BoxUnit, c?: BoxUnit, d?: BoxUnit) => {\n    if (b === undefined && c === undefined && d === undefined) {\n      b = c = d = a;\n    }\n    else if (c === undefined && d === undefined) {\n      c = a;\n      d = b;\n    }\n\n    return mapFromBox(\n      boxUnitToString(a),\n      boxUnitToString(b!),\n      boxUnitToString(c!),\n      boxUnitToString(d!)\n    );\n  }\n  return result;\n}\n\n/** \n * Padding \n */\nexport const padding = createBoxFunction((top, right, bottom, left) => {\n  return {\n    paddingTop: top,\n    paddingRight: right,\n    paddingBottom: bottom,\n    paddingLeft: left\n  };\n});\n\n/** \n * Border \n */\nexport const border = createBoxFunction((top, right, bottom, left) => {\n  return {\n    borderTop: top,\n    borderRight: right,\n    borderBottom: bottom,\n    borderLeft: left\n  };\n});\n\n/** \n * Width \n */\nexport const width = (value: BoxUnit) => {\n  return { width: boxUnitToString(value) };\n}\n\n/** \n * Height\n */\nexport const height = (value: BoxUnit) => {\n  return { height: boxUnitToString(value) };\n}\n","import * as typestyle from 'typestyle';\nimport { types, classes } from 'typestyle';\nimport * as React from 'react';\nimport { BoxUnit, GLSProps } from '../common';\nimport { boxUnitToString, processGLSProps } from '../internal/utils';\n\n/**\n * Puts a (horizontal AND vertical) margin between each child\n */\nexport function gridSpaced(both: BoxUnit): string;\nexport function gridSpaced(topAndBottom: BoxUnit, leftAndRight: BoxUnit): string;\nexport function gridSpaced(topAndBottom: BoxUnit, leftAndRight = topAndBottom): string {\n  const vertical = boxUnitToString(topAndBottom);\n  const horizontal = boxUnitToString(leftAndRight);\n  return typestyle.style(\n    {\n      marginTop: '-' + vertical,\n      marginLeft: '-' + horizontal,\n      '&>*': {\n        marginTop: vertical,\n        marginLeft: horizontal,\n      }\n    } as types.CSSProperties\n  );\n};\n\nexport interface GridProps extends GLSProps {\n  spacing?:\n  | BoxUnit\n  | [BoxUnit, BoxUnit]\n}\n\n/** \n * Lays out children with a margin between them (horizontal and vertical)\n */\nexport const Grid: React.FC<GridProps> = (props) => {\n  const { className, ...otherProps } = processGLSProps(props);\n\n  /** \n   * Figure out the spacing requested \n   */\n  let horizontal!: BoxUnit;\n  let vertical!: BoxUnit;\n  if ('spacing' in props && props.spacing != null) {\n    delete (otherProps as any).spacing;\n    if (typeof props.spacing == 'number' || typeof props.spacing == 'string') {\n      horizontal = props.spacing;\n      vertical = horizontal;\n    } else {\n      [vertical, horizontal] = props.spacing;\n    }\n  }\n\n  const klass = classes(\n    className,\n    gridSpaced(vertical, horizontal),\n  );\n  return (\n    <div {...otherProps} className={klass} data-comment='Grid' />\n  );\n}\nGrid.displayName = 'Grid';\n","import * as typestyle from 'typestyle';\nimport * as React from 'react';\nimport * as csstips from 'csstips';\nimport { Spacing, GLSProps } from '../common';\nimport { processGLSProps } from '../internal/utils';\n\n///////////////////////////////////\n// Vertical \n///////////////////////////////////\n\nexport interface VerticalProps extends GLSProps {\n  spacing?: number,\n\n  verticalAlign?: 'top' /** default */ | 'center' | 'bottom',\n  horizontalAlign?: 'left' /** default */ | 'center' | 'right',\n}\n\n/** \n * Layout out children with a vertical margin between them\n */\nexport const Vertical: React.FC<VerticalProps> = (props) => {\n  const {\n    className,\n    horizontalAlign,\n    verticalAlign,\n    ...otherProps\n  } = processGLSProps(props);\n\n  const klass = typestyle.classes(\n    className,\n    typestyle.style(\n      csstips.content,\n      csstips.vertical,\n      csstips.verticallySpaced(props.spacing == null ? Spacing.vertical : props.spacing),\n      verticalAlign == 'center' && csstips.centerJustified,\n      verticalAlign == 'bottom' && csstips.endJustified,\n      horizontalAlign == 'right' && csstips.end,\n      horizontalAlign == 'center' && csstips.center,\n    )\n  );\n\n  return (\n    <div {...otherProps} className={klass} data-comment='Vertical' />\n  );\n}\nVertical.displayName = 'Vertical';\n","import * as typestyle from 'typestyle';\nimport * as React from 'react';\nimport * as csstips from 'csstips';\nimport { Spacing, GLSProps } from '../common';\nimport { processGLSProps } from '../internal/utils';\n\n///////////////////////////////////\n// Horizontal\n///////////////////////////////////\n\nexport interface HorizontalProps extends GLSProps {\n  spacing?: number,\n\n  horizontalAlign?: 'left' /** default */ | 'center' | 'right',\n  verticalAlign?: 'top' /** default */ | 'center' | 'bottom',\n}\n\nexport const Horizontal: React.FC<HorizontalProps> = (props) => {\n  const {\n    className,\n    horizontalAlign,\n    verticalAlign,\n    ...otherProps } = processGLSProps(props);\n\n  const klass =\n    typestyle.classes(\n      className,\n      typestyle.style(\n        csstips.content,\n        csstips.horizontal,\n        csstips.horizontallySpaced(props.spacing == null ? Spacing.horizontal : props.spacing),\n        horizontalAlign == 'right' && csstips.endJustified,\n        horizontalAlign == 'center' && csstips.centerJustified,\n        verticalAlign == 'center' && csstips.center,\n        verticalAlign == 'bottom' && csstips.end,\n      )\n    );\n\n  return (\n    <div {...otherProps} className={klass} data-comment='Horizontal' />\n  );\n}\nHorizontal.displayName = 'Horizontal';","import * as typestyle from 'typestyle';\nimport * as React from 'react';\nimport * as csstips from 'csstips';\nimport { GLSProps } from '../common';\nimport { processGLSProps } from '../internal/utils';\n\n/** \n * For providing a *as much as available* amount of space for an item\n */\nexport const Flex: React.FC<GLSProps> = (props) => {\n  const { className, ...otherProps } = processGLSProps(props);\n  const klass = typestyle.classes(\n    className,\n    typestyle.style(csstips.flex)\n  );\n  return (\n    <div {...otherProps} className={klass} data-comment='Flex' />\n  );\n};\nFlex.displayName = 'Flex';\n\n/** \n * For providing a *as much as needed* amount of space for an item\n */\nexport const Content: React.FC<GLSProps> = (props) => {\n  const { className, ...otherProps } = processGLSProps(props);\n  const klass = typestyle.classes(\n    className,\n    typestyle.style(csstips.content)\n  );\n  return (\n    <div {...otherProps} className={klass} data-comment='Content' />\n  );\n};\nContent.displayName = 'Content';\n","/** Common */\nexport * from './common';\n\n/** Styles */\nexport * from './styles/box';\nexport * from './styles/scroll';\n\n/** Components */\nexport * from './components/grid';\nexport * from './components/vertical';\nexport * from './components/horizontal';\nexport * from './components/containers';\n","/** \n * Demo components for docs \n */\n\nimport React from \"react\";\n\nexport const BlueDiv: React.FC = (props) => <div style={{ backgroundColor: \"lightskyblue\" }} children={props.children} />;\nexport const PinkDiv: React.FC = (props) => <div style={{ backgroundColor: \"lightpink\" }} children={props.children} />;\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Vertical } from '.'; \nimport * as demos from './demos'; \n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"vertical\"\n    }}>{`Vertical`}</h1>\n    <p>{`Lays out children in a vertically spaced layout.`}</p>\n    <Playground __position={0} __code={'<Vertical>\\n  <demos.BlueDiv>Hello</demos.BlueDiv>\\n  <div>World</div>\\n</Vertical>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Vertical,\n      demos\n    }} mdxType=\"Playground\">\n  <Vertical mdxType=\"Vertical\">\n    <demos.BlueDiv>Hello</demos.BlueDiv>\n    <div>World</div>\n  </Vertical>\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}