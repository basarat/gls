{"version":3,"sources":["/home/travis/build/basarat/gls/src/classes/scroll.ts","/home/travis/build/basarat/gls/src/common.tsx","/home/travis/build/basarat/gls/src/classes/box.ts","/home/travis/build/basarat/gls/src/internal/utils.ts","/home/travis/build/basarat/gls/src/components/grid.tsx","/home/travis/build/basarat/gls/src/components/vertical.tsx","/home/travis/build/basarat/gls/src/components/horizontal.tsx","/home/travis/build/basarat/gls/src/components/containers.tsx","/home/travis/build/basarat/gls/src/index.tsx","/home/travis/build/basarat/gls/src/demos/index.tsx","/home/travis/build/basarat/gls/src/vertical.mdx"],"names":["scrollBoth","-webkit-overflow-scrolling","overflow","scrollHorizontal","overflowX","scrollVertical","overflowY","scrollDisabled","Spacing","vertical","horizontal","grid","mapFromBox","padding","_ref","_ref2","Object","slicedToArray","paddingTop","paddingRight","paddingBottom","paddingLeft","box","united","boxUnitToString","length","_box$map","map","_box$map2","topBottom","leftRight","value","toString","processGLSProps","props","scroll","_props$styles","styles","otherProps","objectWithoutProperties","objectSpread","className","typestyle","apply","scrollHelpers","concat","toConsumableArray","gridSpaced","topAndBottom","leftAndRight","arguments","undefined","marginTop","marginLeft","&>*","Grid","_processGLSProps","spacing","_props$spacing","klass","classes","react","assign","data-comment","displayName","Vertical","horizontalAlign","verticalAlign","csstips","Horizontal","Flex","Content","_processGLSProps2","__webpack_require__","d","__webpack_exports__","vertical_Vertical","horizontal_Horizontal","containers_Flex","BlueDiv","react_default","a","createElement","style","backgroundColor","children","PinkDiv","layoutProps","MDXLayout","MDXContent","components","index_es","mdxType","id","index_esm","__position","__code","__scope","this","Playground","Props","demos","src","demos_BlueDiv","isMDXComponent"],"mappings":"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","file":"static/js/src-vertical.0e4a92cf.js","sourcesContent":["/**\n * @module scroll helpers\n */\nimport { types } from 'typestyle';\n\nexport const scrollBoth: types.NestedCSSProperties = {\n  '-webkit-overflow-scrolling': 'touch',\n  overflow: 'auto'\n};\n\nexport const scrollHorizontal: types.NestedCSSProperties = {\n  '-webkit-overflow-scrolling': 'touch',\n  overflowX: 'auto'\n};\n\nexport const scrollVertical: types.NestedCSSProperties = {\n  '-webkit-overflow-scrolling': 'touch',\n  overflowY: 'auto'\n};\n\n/**\n * If you expect a child somewhere down in the tree to scroll\n * you need to tell the browser to prevent a scroll bar. \n * Example use : `parent(scrollDisabled) > child(scroll)`\n */\nexport const scrollDisabled: types.NestedCSSProperties = {\n  overflow: 'hidden'\n};\n","import { types } from \"typestyle\";\n\n/** \n * The default spacing used by the layout components \n * You can customize it e.g. \n * ```ts\n * import { Spacing } from 'gls';\n * Spacing.vertical = 30;\n * ```\n */\nexport const Spacing = {\n  vertical: 24,\n  horizontal: 24,\n  grid: {\n    vertical: 24,\n    horizontal: 24,\n  }\n}\n\n/** \n * Example: \n * - 5 (implies 5px)\n * - '5rem'\n */\nexport type BoxUnit = number | string;\n\n/**\n * A box function is something that can take:\n * - all\n * - topAndBottom + leftRight\n * - top + right + bottom + left\n * \n * And generate a CSS classname from it.\n */\nexport type BoxFunction = (all: Box) => types.NestedCSSProperties;\n\n/** \n * DataStructure for common prop tuple representation \n */\nexport type Box =\n  /** top,right,bottom,left */\n  | BoxUnit\n  /** Top&Bottom, Left&Right */\n  | [BoxUnit, BoxUnit]\n  /** Top, Right, Bottom, Left */\n  | [BoxUnit, BoxUnit, BoxUnit, BoxUnit];\n\n/** \n * Props accepted by all our components \n */\nexport interface GLSProps extends React.HTMLProps<HTMLDivElement> {\n  scroll?: 'both' | 'vertical' | 'horizontal' | 'disabled';\n  padding?: Box;\n  styles?: [types.NestedCSSProperties | null | false]\n}\n","import { BoxFunction, BoxUnit, Box } from \"../common\";\nimport { boxUnitToString } from \"../internal/utils\";\nimport * as typestyle from \"typestyle\";\n\n/**\n * @param mapFromBox function that expects a full `Box`\n * @returns a function that can work with any partial `Box`\n */\nfunction createBoxFunction(\n  mapFromBox: (box: [BoxUnit, BoxUnit, BoxUnit, BoxUnit]) => typestyle.types.NestedCSSProperties\n): BoxFunction {\n  const result: BoxFunction = (box: Box) => {\n    if (typeof box == 'string' || typeof box == 'number') {\n      const united = boxUnitToString(box);\n      return mapFromBox([united, united, united, united]);\n    } else if (box.length == 2) {\n      const [topBottom, leftRight] = box.map(boxUnitToString);\n      return mapFromBox([topBottom, leftRight, topBottom, leftRight]);\n    } else {\n      return mapFromBox(box.map(boxUnitToString) as any);\n    }\n  }\n  return result;\n}\n\n/** \n * Padding \n */\nexport const padding = createBoxFunction(([top, right, bottom, left]) => {\n  return {\n    paddingTop: top,\n    paddingRight: right,\n    paddingBottom: bottom,\n    paddingLeft: left\n  };\n});\n","import * as typestyle from 'typestyle';\nimport { BoxUnit, GLSProps } from \"../common\";\nimport * as scrollHelpers from \"../classes/scroll\";\nimport * as box from \"../classes/box\";\n\n/**\n * For `number` we assume pixels e.g. 5 => '5px'\n * For `string` *you* should provide the unit e.g. '5px'\n */\nexport function boxUnitToString(value: BoxUnit): string {\n  if (typeof value === 'number') {\n    return value.toString() + 'px';\n  }\n  else {\n    return value;\n  }\n}\n\n/** \n * Converts common suppoted props into a `klass` + remainder \n */\nexport function processGLSProps<T extends GLSProps>(props: T): Omit<T, 'scroll' | 'padding' | 'styles'> {\n  const { scroll, padding, styles = [], ...otherProps } = props;\n\n  return {\n    ...otherProps,\n    className: typestyle.classes(\n      props.className,\n      typestyle.style(\n        /** Scroll */\n        props.scroll != null && (\n          props.scroll == 'disabled' ? scrollHelpers.scrollDisabled\n            : props.scroll == 'horizontal' ? scrollHelpers.scrollHorizontal\n              : props.scroll == 'vertical' ? scrollHelpers.scrollVertical\n                : scrollHelpers.scrollBoth\n        ),\n        /** Padding */\n        padding != null && box.padding(padding),\n        /** Any user customizations */\n        ...styles,\n      )\n    ),\n  }\n}","import * as typestyle from 'typestyle';\nimport { types, classes } from 'typestyle';\nimport * as React from 'react';\nimport { BoxUnit, GLSProps } from '../common';\nimport { boxUnitToString, processGLSProps } from '../internal/utils';\n\n/**\n * Puts a (horizontal AND vertical) margin between each child\n */\nexport function gridSpaced(both: BoxUnit): string;\nexport function gridSpaced(topAndBottom: BoxUnit, leftAndRight: BoxUnit): string;\nexport function gridSpaced(topAndBottom: BoxUnit, leftAndRight = topAndBottom): string {\n  const vertical = boxUnitToString(topAndBottom);\n  const horizontal = boxUnitToString(leftAndRight);\n  return typestyle.style(\n    {\n      marginTop: '-' + vertical,\n      marginLeft: '-' + horizontal,\n      '&>*': {\n        marginTop: vertical,\n        marginLeft: horizontal,\n      }\n    } as types.CSSProperties\n  );\n};\n\nexport interface GridProps extends GLSProps {\n  spacing?:\n  | BoxUnit\n  | [BoxUnit, BoxUnit]\n}\n\n/** \n * Lays out children with a margin between them (horizontal and vertical)\n */\nexport const Grid: React.FC<GridProps> = (props) => {\n  const { className, ...otherProps } = processGLSProps(props);\n\n  /** \n   * Figure out the spacing requested \n   */\n  let horizontal!: BoxUnit;\n  let vertical!: BoxUnit;\n  if ('spacing' in props && props.spacing != null) {\n    delete (otherProps as any).spacing;\n    if (typeof props.spacing == 'number' || typeof props.spacing == 'string') {\n      horizontal = props.spacing;\n      vertical = horizontal;\n    } else {\n      [vertical, horizontal] = props.spacing;\n    }\n  }\n\n  const klass = classes(\n    className,\n    gridSpaced(vertical, horizontal),\n  );\n  return (\n    <div {...otherProps} className={klass} data-comment='Grid' />\n  );\n}\nGrid.displayName = 'Grid';\n","import * as typestyle from 'typestyle';\nimport * as React from 'react';\nimport * as csstips from 'csstips';\nimport { Spacing, GLSProps } from '../common';\nimport { processGLSProps } from '../internal/utils';\n\n///////////////////////////////////\n// Vertical \n///////////////////////////////////\n\nexport interface VerticalProps extends GLSProps {\n  spacing?: number,\n\n  verticalAlign?: 'top' /** default */ | 'center' | 'bottom',\n  horizontalAlign?: 'left' /** default */ | 'center' | 'right',\n}\n\n/** \n * Layout out children with a vertical margin between them\n */\nexport const Vertical: React.FC<VerticalProps> = (props) => {\n  const {\n    className,\n    horizontalAlign,\n    verticalAlign,\n    ...otherProps\n  } = processGLSProps(props);\n\n  const klass = typestyle.classes(\n    className,\n    typestyle.style(\n      csstips.content,\n      csstips.vertical,\n      csstips.verticallySpaced(props.spacing == null ? Spacing.vertical : props.spacing),\n      verticalAlign == 'center' && csstips.centerJustified,\n      verticalAlign == 'bottom' && csstips.endJustified,\n      horizontalAlign == 'right' && csstips.end,\n      horizontalAlign == 'center' && csstips.center,\n    )\n  );\n\n  return (\n    <div {...otherProps} className={klass} data-comment='Vertical' />\n  );\n}\nVertical.displayName = 'Vertical';\n","import * as typestyle from 'typestyle';\nimport * as React from 'react';\nimport * as csstips from 'csstips';\nimport { Spacing, GLSProps } from '../common';\nimport { processGLSProps } from '../internal/utils';\n\n///////////////////////////////////\n// Horizontal\n///////////////////////////////////\n\nexport interface HorizontalProps extends GLSProps {\n  spacing?: number,\n\n  horizontalAlign?: 'left' /** default */ | 'center' | 'right',\n  verticalAlign?: 'top' /** default */ | 'center' | 'bottom',\n}\n\nexport const Horizontal: React.FC<HorizontalProps> = (props) => {\n  const {\n    className,\n    horizontalAlign,\n    verticalAlign,\n    ...otherProps } = processGLSProps(props);\n\n  const klass =\n    typestyle.classes(\n      className,\n      typestyle.style(\n        csstips.content,\n        csstips.horizontal,\n        csstips.horizontallySpaced(props.spacing == null ? Spacing.horizontal : props.spacing),\n        horizontalAlign == 'right' && csstips.endJustified,\n        horizontalAlign == 'center' && csstips.centerJustified,\n        verticalAlign == 'center' && csstips.center,\n        verticalAlign == 'bottom' && csstips.end,\n      )\n    );\n\n  return (\n    <div {...otherProps} className={klass} data-comment='Horizontal' />\n  );\n}\nHorizontal.displayName = 'Horizontal';","import * as typestyle from 'typestyle';\nimport * as React from 'react';\nimport * as csstips from 'csstips';\nimport { GLSProps } from '../common';\nimport { processGLSProps } from '../internal/utils';\n\n/** \n * For providing a *as much as available* amount of space for an item\n */\nexport const Flex: React.FC<GLSProps> = (props) => {\n  const { className, ...otherProps } = processGLSProps(props);\n  const klass = typestyle.classes(\n    className,\n    typestyle.style(csstips.flex)\n  );\n  return (\n    <div {...otherProps} className={klass} data-comment='Flex' />\n  );\n};\nFlex.displayName = 'Flex';\n\n/** \n * For providing a *as much as needed* amount of space for an item\n */\nexport const Content: React.FC<GLSProps> = (props) => {\n  const { className, ...otherProps } = processGLSProps(props);\n  const klass = typestyle.classes(\n    className,\n    typestyle.style(csstips.content)\n  );\n  return (\n    <div {...otherProps} className={klass} data-comment='Content' />\n  );\n};\nContent.displayName = 'Content';\n","export * from './classes/scroll';\n\nexport * from './common';\nexport * from './components/grid';\nexport * from './components/vertical';\nexport * from './components/horizontal';\nexport * from './components/containers';\n","/** \n * Demo components for docs \n */\n\nimport React from \"react\";\n\nexport const BlueDiv: React.FC = (props) => <div style={{ backgroundColor: \"lightskyblue\" }} children={props.children} />;\nexport const PinkDiv: React.FC = (props) => <div style={{ backgroundColor: \"lightpink\" }} children={props.children} />;\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Vertical } from '.'; \nimport * as demos from './demos'; \n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"vertical\"\n    }}>{`Vertical`}</h1>\n    <p>{`Lays out children in a vertically spaced layout.`}</p>\n    <Playground __position={0} __code={'<Vertical>\\n  <demos.BlueDiv>Hello</demos.BlueDiv>\\n  <div>World</div>\\n</Vertical>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Vertical,\n      demos\n    }} mdxType=\"Playground\">\n  <Vertical mdxType=\"Vertical\">\n    <demos.BlueDiv>Hello</demos.BlueDiv>\n    <div>World</div>\n  </Vertical>\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}