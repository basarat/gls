(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{"./src/docs/components/vertical.mdx":function(e,t,i){"use strict";i.r(t),i.d(t,"default",function(){return b});var l=i("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),n=(i("./node_modules/react/index.js"),i("./node_modules/@mdx-js/react/dist/index.es.js")),o=i("./node_modules/docz/dist/index.esm.js"),c=i("./src/index.tsx"),r=i("./src/demos/index.tsx"),a={},s="wrapper";function b(e){var t=e.components,i=Object(l.a)(e,["components"]);return Object(n.b)(s,Object.assign({},a,i,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h1",{id:"vertical"},"Vertical"),Object(n.b)("p",null,"Lays out children in a vertically spaced layout."),Object(n.b)(o.c,{__position:0,__code:"<Vertical>\n  <div style={{ backgroundColor: 'lightskyblue' }}>Hello</div>\n  <div style={{ backgroundColor: 'lightpink' }}>World</div>\n</Vertical>",__scope:{props:this?this.props:i,Playground:o.c,Vertical:c.e,demos:r},mdxType:"Playground"},Object(n.b)(c.e,{mdxType:"Vertical"},Object(n.b)("div",{style:{backgroundColor:"lightskyblue"}},"Hello"),Object(n.b)("div",{style:{backgroundColor:"lightpink"}},"World"))),Object(n.b)("p",null,"Since ",Object(n.b)("inlineCode",{parentName:"p"},"Vertical")," follows the ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"../principle-spacing/"}),"spacing principle")," you can compose / nest ",Object(n.b)("inlineCode",{parentName:"p"},"Vertical"),"s easily. The following example has three ",Object(n.b)("inlineCode",{parentName:"p"},"Verticals")," in a ",Object(n.b)("inlineCode",{parentName:"p"},"Vertical(Vertical(blue,pink),Vertical(blue,pink))")," heirarchy but to the user it looks seemless. This ability to nest allows you to easily create and reuse components without having to worry about how they will get used."),Object(n.b)(o.c,{__position:1,__code:"<Vertical>\n  <Vertical>\n    <div style={{ backgroundColor: 'lightskyblue' }}>Hello</div>\n    <div style={{ backgroundColor: 'lightpink' }}>World</div>\n  </Vertical>\n  <Vertical>\n    <div style={{ backgroundColor: 'lightskyblue' }}>Second Hello</div>\n    <div style={{ backgroundColor: 'lightpink' }}>Second World</div>\n  </Vertical>\n</Vertical>",__scope:{props:this?this.props:i,Playground:o.c,Vertical:c.e,demos:r},mdxType:"Playground"},Object(n.b)(c.e,{mdxType:"Vertical"},Object(n.b)(c.e,{mdxType:"Vertical"},Object(n.b)("div",{style:{backgroundColor:"lightskyblue"}},"Hello"),Object(n.b)("div",{style:{backgroundColor:"lightpink"}},"World")),Object(n.b)(c.e,{mdxType:"Vertical"},Object(n.b)("div",{style:{backgroundColor:"lightskyblue"}},"Second Hello"),Object(n.b)("div",{style:{backgroundColor:"lightpink"}},"Second World")))),Object(n.b)("h2",{id:"childplacementprops"},"ChildPlacementProps"),Object(n.b)("p",null,Object(n.b)("inlineCode",{parentName:"p"},"Vertical")," ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"../common-types/"}),"supports all ",Object(n.b)("inlineCode",{parentName:"a"},"ChildPlacementProps")),"."),Object(n.b)("h2",{id:"glsprops"},"GLSProps"),Object(n.b)("p",null,Object(n.b)("inlineCode",{parentName:"p"},"Vertical")," ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"../common-types/"}),"supports all ",Object(n.b)("inlineCode",{parentName:"a"},"GLSProps")),"."),Object(n.b)("h2",{id:"sizingprop"},"SizingProp"),Object(n.b)("p",null,Object(n.b)("inlineCode",{parentName:"p"},"Vertical")," supports the ",Object(n.b)("inlineCode",{parentName:"p"},"sizing")," prop as explained in the ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"../principle-sizing/"}),"sizing principle"),"."))}b&&b===Object(b)&&Object.isExtensible(b)&&Object.defineProperty(b,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/docs/components/vertical.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=src-docs-components-vertical.3653fdd076ab6fbce297.js.map