(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{"./src/docs/components/responsive.mdx":function(e,o,t){"use strict";t.r(o),t.d(o,"default",function(){return d});var i,n=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),l=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),r=t("./node_modules/docz/dist/index.esm.js"),s=t("./src/index.tsx"),c=t("./src/demos/index.tsx"),a=(i="Vertical",function(e){return console.warn("Component "+i+" was not imported, exported, or provided by MDXProvider as global scope"),Object(l.b)("div",e)}),p={},b="wrapper";function d(e){var o=e.components,t=Object(n.a)(e,["components"]);return Object(l.b)(b,Object.assign({},p,t,{components:o,mdxType:"MDXLayout"}),Object(l.b)("h1",{id:"responsive"},"Responsive"),Object(l.b)("p",null,"Lays out children in a vertically or horizontally spaced layout based on given breakpoint."),Object(l.b)(r.c,{__position:0,__code:"<Vertical>\n  <div style={{ backgroundColor: 'lightskyblue' }}>Hello</div>\n  <div style={{ backgroundColor: 'lightpink' }}>World</div>\n</Vertical>",__scope:{props:this?this.props:t,Playground:r.c,Responsive:s.d,demos:c},mdxType:"Playground"},Object(l.b)(a,{mdxType:"Vertical"},Object(l.b)("div",{style:{backgroundColor:"lightskyblue"}},"Hello"),Object(l.b)("div",{style:{backgroundColor:"lightpink"}},"World"))),Object(l.b)("p",null,"Since ",Object(l.b)("inlineCode",{parentName:"p"},"Vertical")," follows the ",Object(l.b)("a",Object.assign({parentName:"p"},{href:"../principle-spacing/"}),"spacing principle")," you can compose / nest ",Object(l.b)("inlineCode",{parentName:"p"},"Vertical"),"s easily. The following example has three ",Object(l.b)("inlineCode",{parentName:"p"},"Verticals")," in a ",Object(l.b)("inlineCode",{parentName:"p"},"Vertical(Vertical(blue,pink),Vertical(blue,pink))")," heirarchy but to the user it looks seemless. This ability to nest allows you to easily create and reuse components without having to worry about how they will get used."),Object(l.b)(r.c,{__position:1,__code:"<Vertical>\n  <Vertical>\n    <div style={{ backgroundColor: 'lightskyblue' }}>Hello</div>\n    <div style={{ backgroundColor: 'lightpink' }}>World</div>\n  </Vertical>\n  <Vertical>\n    <div style={{ backgroundColor: 'lightskyblue' }}>Second Hello</div>\n    <div style={{ backgroundColor: 'lightpink' }}>Second World</div>\n  </Vertical>\n</Vertical>",__scope:{props:this?this.props:t,Playground:r.c,Responsive:s.d,demos:c},mdxType:"Playground"},Object(l.b)(a,{mdxType:"Vertical"},Object(l.b)(a,{mdxType:"Vertical"},Object(l.b)("div",{style:{backgroundColor:"lightskyblue"}},"Hello"),Object(l.b)("div",{style:{backgroundColor:"lightpink"}},"World")),Object(l.b)(a,{mdxType:"Vertical"},Object(l.b)("div",{style:{backgroundColor:"lightskyblue"}},"Second Hello"),Object(l.b)("div",{style:{backgroundColor:"lightpink"}},"Second World")))),Object(l.b)("h2",{id:"props"},"Props"),Object(l.b)("h2",{id:"glsprops"},"GLSProps"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"Vertical")," ",Object(l.b)("a",Object.assign({parentName:"p"},{href:"../common-types/"}),"supports all ",Object(l.b)("inlineCode",{parentName:"a"},"GLSProps"))),Object(l.b)("h2",{id:"sizingprop"},"SizingProp"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"Vertical")," supports the ",Object(l.b)("inlineCode",{parentName:"p"},"sizing")," prop as explained in the ",Object(l.b)("a",Object.assign({parentName:"p"},{href:"../principle-sizing/"}),"sizing principle"),"."))}d&&d===Object(d)&&Object.isExtensible(d)&&Object.defineProperty(d,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/docs/components/responsive.mdx"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=src-docs-components-responsive.3653fdd076ab6fbce297.js.map