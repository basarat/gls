{"version":3,"sources":["/home/travis/build/basarat/gls/src/docs/components/component.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","this","Playground","Vertical","Horizontal","Responsive","demos","placeholder","sizing","style","height","breakpoint","isMDXComponent"],"mappings":"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","file":"static/js/src-docs-components-component.5522c22b.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground } from 'docz';\nimport { Vertical, Horizontal, Responsive } from '../..'; \nimport * as demos from '../../demos'; \n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <demos.Star />\n    <h1 {...{\n      \"id\": \"component\"\n    }}>{`Component`}</h1>\n    <p>{`GLS can easily work with components without any special requirements, so you can bring your own or add explicit support for `}<inlineCode parentName=\"p\">{`ComponentProps`}</inlineCode>{`. We cover these below.`}</p>\n    <h2 {...{\n      \"id\": \"bring-your-own\"\n    }}>{`Bring your own`}</h2>\n    <p>{`For example, here is a simple `}<inlineCode parentName=\"p\">{`<input/>`}</inlineCode>{` without any gls use: `}</p>\n    <Playground __position={1} __code={'<input placeholder=\\\"Example\\\" />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      Responsive,\n      demos\n    }} mdxType=\"Playground\">\n  <input placeholder='Example' />\n    </Playground>\n    <p>{`You can easily place these (raw `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{`s) in a `}<a parentName=\"p\" {...{\n        \"href\": \"../vertical/\"\n      }}>{`vertical`}</a>{` and you can see that they get nicely vertically-spaced, and `}<inlineCode parentName=\"p\">{`stretch`}</inlineCode>{` nicely (thanks to `}<inlineCode parentName=\"p\">{`Vertical`}</inlineCode>{`'s default `}<inlineCode parentName=\"p\">{`horizontalAlign`}</inlineCode>{`):`}</p>\n    <Playground __position={2} __code={'<Vertical>\\n  <input placeholder=\\\"Example\\\" />\\n  <input placeholder=\\\"Example\\\" />\\n  <input placeholder=\\\"Example\\\" />\\n</Vertical>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      Responsive,\n      demos\n    }} mdxType=\"Playground\">\n  <Vertical mdxType=\"Vertical\">\n    <input placeholder='Example' />\n    <input placeholder='Example' />\n    <input placeholder='Example' />\n  </Vertical>\n    </Playground>\n    <p>{`You can even have a `}<em parentName=\"p\">{`single`}</em>{` input in a `}<inlineCode parentName=\"p\">{`Vertical`}</inlineCode>{` and it essentially stretches (horizontally) to match the parent: `}</p>\n    <Playground __position={3} __code={'<Vertical>\\n  <input placeholder=\\\"Example\\\" />\\n</Vertical>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      Responsive,\n      demos\n    }} mdxType=\"Playground\">\n  <Vertical mdxType=\"Vertical\">\n    <input placeholder='Example' />\n  </Vertical>\n    </Playground>\n    <p>{`This allows you to create a reusable (`}<inlineCode parentName=\"p\">{`Vertical>input`}</inlineCode>{`) pair that you can provide various `}<a parentName=\"p\" {...{\n        \"href\": \"../common-types/\"\n      }}>{`BaseProps`}</a>{` for (using the `}<inlineCode parentName=\"p\">{`Vertical`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`Vertical>input`}</inlineCode>{` pair).`}</p>\n    <p>{`And you can control various props using either of the `}<inlineCode parentName=\"p\">{`Vertical`}</inlineCode>{`/`}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` e.g. you can `}<inlineCode parentName=\"p\">{`stretch`}</inlineCode>{` on the Vertical (as explained in the `}<a parentName=\"p\" {...{\n        \"href\": \"../princile-sizing/\"\n      }}>{`sizing principle`}</a>{`) allowing two streching `}<inlineCode parentName=\"p\">{`Vertical>input`}</inlineCode>{`s in a Horziontal: `}</p>\n    <Playground __position={4} __code={'<Horizontal>\\n  <Vertical sizing=\\\"stretch\\\">\\n    <input placeholder=\\\"Example\\\" />\\n  </Vertical>\\n  <Vertical sizing=\\\"stretch\\\">\\n    <input placeholder=\\\"Example\\\" />\\n  </Vertical>\\n</Horizontal>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      Responsive,\n      demos\n    }} mdxType=\"Playground\">\n  <Horizontal mdxType=\"Horizontal\">\n    <Vertical sizing=\"stretch\" mdxType=\"Vertical\">\n      <input placeholder='Example' />\n    </Vertical>\n    <Vertical sizing=\"stretch\" mdxType=\"Vertical\">\n      <input placeholder='Example' />\n    </Vertical>\n  </Horizontal>\n    </Playground>\n    <p>{`You can props to the `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` as well e.g. an explicit height can be set: `}</p>\n    <Playground __position={5} __code={'<Vertical sizing=\\\"stretch\\\">\\n  <input placeholder=\\\"Example\\\" style={{ height: \\'30px\\' }} />\\n</Vertical>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      Responsive,\n      demos\n    }} mdxType=\"Playground\">\n  <Vertical sizing=\"stretch\" mdxType=\"Vertical\">\n    <input placeholder='Example' style={{\n          height: '30px'\n        }} />\n  </Vertical>\n    </Playground>\n    <p>{`Of course you can create a component out of the `}<inlineCode parentName=\"p\">{`Vertical>input`}</inlineCode>{` pair. However if you want to compose a component that supports various gls props in a single tag, you can use `}<inlineCode parentName=\"p\">{`gls.ComponentProps`}</inlineCode>{` / `}<inlineCode parentName=\"p\">{`gls.component`}</inlineCode>{` which we cover next. `}</p>\n    <h2 {...{\n      \"id\": \"componentprops\"\n    }}>{`ComponentProps`}</h2>\n    <p><inlineCode parentName=\"p\">{`ComponentProps`}</inlineCode>{` is a grouping of a set of common props that allow you to hook into the layout principles provided by gls:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`ClassNameProp`}</inlineCode>{`: `}<a parentName=\"li\" {...{\n          \"href\": \"../common-types/\"\n        }}>{`Allows you to pass in CSS class names`}</a>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`ScrollProp`}</inlineCode>{`: `}<a parentName=\"li\" {...{\n          \"href\": \"../common-types/\"\n        }}>{`Specify scrolling behaviours`}</a>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`PaddingProp`}</inlineCode>{`: `}<a parentName=\"li\" {...{\n          \"href\": \"../common-types/\"\n        }}>{`Specifies padding`}</a>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`SizingProp`}</inlineCode>{`: `}<a parentName=\"li\" {...{\n          \"href\": \"../common-types/\"\n        }}>{`Specify implicit size control`}</a>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`SizeProps`}</inlineCode>{`: `}<a parentName=\"li\" {...{\n          \"href\": \"../common-types/\"\n        }}>{`Specify explicit size control`}</a>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`StylesProp`}</inlineCode>{`: `}<a parentName=\"li\" {...{\n          \"href\": \"../common-types/\"\n        }}>{`Allows you to use TypeStyle CSS mixins`}</a>{`. `}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"component-1\"\n    }}>{`component`}</h2>\n    <p>{`There is `}<inlineCode parentName=\"p\">{`gls.component(props) => props`}</inlineCode>{` function which is a simple map:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`OtherProps + ComponentProps (subset or fullset) + { className? }\n  => OtherProps + { className (including existing className if present) }\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`gls.component`}</inlineCode>{` function that takes any set (subset or fullset) of `}<inlineCode parentName=\"p\">{`ComponentProps`}</inlineCode>{` and returns props with any `}<inlineCode parentName=\"p\">{`ComponentProps`}</inlineCode>{` omitted + processsed and placed into the `}<inlineCode parentName=\"p\">{`className`}</inlineCode>{` prop (taking into account any existing `}<inlineCode parentName=\"p\">{`className`}</inlineCode>{` as well). You then use the `}<inlineCode parentName=\"p\">{`className`}</inlineCode>{` in your component.`}</p>\n    <p>{`We look at examples below.`}</p>\n    <h2 {...{\n      \"id\": \"creating-a-component\"\n    }}>{`Creating a component`}</h2>\n    <p>{`You can use any partial set of `}<inlineCode parentName=\"p\">{`ComponentProps`}</inlineCode>{` in your component e.g here we just use the `}<inlineCode parentName=\"p\">{`SizeProps`}</inlineCode>{`: `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`export interface OnlySomeProps extends\n  React.ButtonHTMLAttributes<HTMLButtonElement>,\n  gls.SizeProps {\n}\n\nexport const OnlySomePropsButton: React.FC<OnlySomeProps> = (props) => {\n  const processedProps = gls.component(props);\n\n  return <button {...processedProps} />;\n}\n`}</code></pre>\n    <p>{`or you can use all the `}<inlineCode parentName=\"p\">{`ComponentProps`}</inlineCode>{`: `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`export interface AllTheProps extends\n  React.ButtonHTMLAttributes<HTMLButtonElement>,\n  gls.ComponentProps {\n}\nexport const AllThePropsButton: React.FC<AllTheProps> = (props) => {\n  const processedProps = gls.component(props);\n\n  return <button {...processedProps} />;\n}\n`}</code></pre>\n    <p>{`Any props that are not a part of `}<inlineCode parentName=\"p\">{`ComponentProps`}</inlineCode>{` are yours to handle and returned as is from `}<inlineCode parentName=\"p\">{`gls.component`}</inlineCode>{` e.g. below you can see the `}<inlineCode parentName=\"p\">{`error`}</inlineCode>{` prop passing-through the `}<inlineCode parentName=\"p\">{`component`}</inlineCode>{` function without any processing: `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`export interface LimitedButtonProps extends\n  gls.ComponentProps {\n  /** Turns red if in error state */\n  error?: boolean\n}\nexport const LimitedButton: React.FC<LimitedButtonProps> = (props) => {\n  /** \n   * Generates a className from component props \n   * + returns the rest\n   **/\n  const {className, error} = gls.component(props);\n  \n  /** Handle the error */\n  const errorStyle = error ? { backgroundColor: 'red' } : {};\n  \n  return <button className={className} style={errorStyle} />;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"defaults\"\n    }}>{`defaults`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`component`}</inlineCode>{` function takes a second `}<inlineCode parentName=\"p\">{`defaults: ComponentProps`}</inlineCode>{` argument.`}</p>\n    <p>{`You can use it to provide defaults for any `}<inlineCode parentName=\"p\">{`ComponentProps`}</inlineCode>{` e.g.\nit is good practice to have an `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` with default `}<inlineCode parentName=\"p\">{`sizing:'stretch'`}</inlineCode>{`(`}<a parentName=\"p\" {...{\n        \"href\": \"../guidance-components/\"\n      }}>{`later we also cover best layout practices for components`}</a>{`): `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`export interface DefaultInputProps extends\n  React.InputHTMLAttributes<HTMLInputElement>,\n  gls.ComponentProps {\n}\n\nexport const DefaultInput: React.FC<DefaultInputProps> = (props) => {\n  const { className, ...otherProps } =\n    gls.component(props, { sizing: 'stretch' });\n\n  return <input className={className} {...otherProps} />\n};\n`}</code></pre>\n    <p>{`Such an input behaves nicely in common vertical, horizontal and responsive layouts: `}</p>\n    <Playground __position={6} __code={'<Vertical>\\n  <demos.DefaultInput placeholder=\\\"Example\\\" />\\n  <demos.DefaultInput placeholder=\\\"Example\\\" />\\n</Vertical>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      Responsive,\n      demos\n    }} mdxType=\"Playground\">\n  <Vertical mdxType=\"Vertical\">\n    <demos.DefaultInput placeholder=\"Example\" />\n    <demos.DefaultInput placeholder=\"Example\" />\n  </Vertical>\n    </Playground>\n    <Playground __position={7} __code={'<Horizontal>\\n  <demos.DefaultInput placeholder=\\\"Example\\\" />\\n  <demos.DefaultInput placeholder=\\\"Example\\\" />\\n</Horizontal>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      Responsive,\n      demos\n    }} mdxType=\"Playground\">\n  <Horizontal mdxType=\"Horizontal\">\n    <demos.DefaultInput placeholder=\"Example\" />\n    <demos.DefaultInput placeholder=\"Example\" />\n  </Horizontal>\n    </Playground>\n    <Playground __position={8} __code={'<Responsive breakpoint={650}>\\n  <demos.DefaultInput placeholder=\\\"Example\\\" />\\n  <demos.DefaultInput placeholder=\\\"Example\\\" />\\n</Responsive>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      Responsive,\n      demos\n    }} mdxType=\"Playground\">\n  <Responsive breakpoint={650} mdxType=\"Responsive\">\n    <demos.DefaultInput placeholder=\"Example\" />\n    <demos.DefaultInput placeholder=\"Example\" />\n  </Responsive>\n    </Playground>\n    <h2 {...{\n      \"id\": \"using-third-party-libraries\"\n    }}>{`Using third party libraries`}</h2>\n    <p>{`Since the `}<inlineCode parentName=\"p\">{`component`}</inlineCode>{` function just returns a `}<inlineCode parentName=\"p\">{`className`}</inlineCode>{` you can easily use its features with any third party components that support the className prop e.g. material-ui`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// Use \\`gls.component\\`\nconst className = gls.component({width: '100%'});\n\n// With any library\nimport Button from '@material-ui/core/Button';\n\n<Button className={className} variant=\"contained\" color=\"primary\">\n  Hello World\n</Button>\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}