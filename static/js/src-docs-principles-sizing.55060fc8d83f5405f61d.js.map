{"version":3,"sources":["/home/travis/build/basarat/gls/src/docs/principles/sizing.mdx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_travis_build_basarat_gls_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","docz__WEBPACK_IMPORTED_MODULE_3__","__position","__code","__scope","this","Playground","Vertical","Horizontal","Flex","Content","___WEBPACK_IMPORTED_MODULE_4__","height","style","backgroundColor","sizing","spacing","width","isMDXComponent"],"mappings":"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","file":"static/js/src-docs-principles-sizing.410699a5.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground } from 'docz';\nimport { Vertical, Horizontal, Flex, Content } from '../..'; \n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"sizing\"\n    }}>{`Sizing`}</h1>\n    <p>{`The ability to control the sizing of a container is what fundamentally makes it possible to mix `}<em parentName=\"p\">{`explicit sized`}</em>{` (simple) / `}<em parentName=\"p\">{`flex sized`}</em>{` (powerful) and `}<em parentName=\"p\">{`flexible`}</em>{` (super-powerful) layout items in your designs. We cover them one by one below.`}</p>\n    <h2 {...{\n      \"id\": \"explicit-sized\"\n    }}>{`Explicit sized`}</h2>\n    <p>{`Driven by explicit `}<inlineCode parentName=\"p\">{`width,height`}</inlineCode>{` arguments. Here we have a simple `}<inlineCode parentName=\"p\">{`Vertical`}</inlineCode>{` container with explicit `}<inlineCode parentName=\"p\">{`height`}</inlineCode>{`: `}</p>\n    <Playground __position={0} __code={'<Vertical height={100} style={{ backgroundColor: \\'lightskyblue\\' }}>\\n  Hello world\\n</Vertical>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      Flex,\n      Content\n    }} mdxType=\"Playground\">\n  <Vertical height={100} style={{\n        backgroundColor: \"lightskyblue\"\n      }} mdxType=\"Vertical\">\n    Hello world\n  </Vertical>\n    </Playground>\n    <p>{`This is essentially what you are doing in most design tools out there. Sadly explicit sizing does not scale to `}<em parentName=\"p\">{`real`}</em>{` applications where sizes need to be reactive to either their parent or their content. Fortunately we provide concepts to handle these cases.`}</p>\n    <h2 {...{\n      \"id\": \"flex-sized\"\n    }}>{`Flex sized`}</h2>\n    <p>{`A flex sized component takes up as much space as offered by the parent. `}</p>\n    <p>{`In the example below, we have an explicit sized `}<inlineCode parentName=\"p\">{`Vertical`}</inlineCode>{` (background `}<inlineCode parentName=\"p\">{`lightskyblue`}</inlineCode>{`) with an inner flex sized `}<inlineCode parentName=\"p\">{`Vertical`}</inlineCode>{` (background `}<inlineCode parentName=\"p\">{`darkorange`}</inlineCode>{`). The inner vertical keeps its size to match that of the outer container (observed below as you don't see the background of the parent as it is filled in by the child).`}</p>\n    <Playground __position={1} __code={'<Vertical height={100} style={{ backgroundColor: \\'lightskyblue\\' }}>\\n  <Vertical sizing={\\'flex\\'} style={{ backgroundColor: \\'darkorange\\' }}>\\n    I\\'m taking up all the space from the parent\\n  </Vertical>\\n</Vertical>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      Flex,\n      Content\n    }} mdxType=\"Playground\">\n  <Vertical height={100} style={{\n        backgroundColor: \"lightskyblue\"\n      }} mdxType=\"Vertical\">\n    <Vertical sizing={'flex'} style={{\n          backgroundColor: \"darkorange\"\n        }} mdxType=\"Vertical\">\n        I'm taking up all the space from the parent\n    </Vertical>  \n  </Vertical>\n    </Playground>\n    <h2 {...{\n      \"id\": \"content-sized\"\n    }}>{`Content sized`}</h2>\n    <p>{`A content sized component takes up as much space as needed by the children. This is the most common sizing that you want and is therefore the default.`}</p>\n    <p>{`In the example below, we have an explicit sized `}<inlineCode parentName=\"p\">{`Vertical`}</inlineCode>{` (background `}<inlineCode parentName=\"p\">{`lightskyblue`}</inlineCode>{`) with an inner content-sized `}<inlineCode parentName=\"p\">{`Vertical`}</inlineCode>{` (background `}<inlineCode parentName=\"p\">{`darkorange`}</inlineCode>{`). The inner vertical keeps it size to match whatever is needed by its children (observed below as you see the background of the parent where the child ends)`}</p>\n    <Playground __position={2} __code={'<Vertical height={100} style={{ backgroundColor: \\'lightskyblue\\' }}>\\n  <Vertical style={{ backgroundColor: \\'darkorange\\' }}>\\n    I\\'m taking up as much space as needed by my children\\n  </Vertical>\\n</Vertical>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      Flex,\n      Content\n    }} mdxType=\"Playground\">\n  <Vertical height={100} style={{\n        backgroundColor: \"lightskyblue\"\n      }} mdxType=\"Vertical\">\n    <Vertical style={{\n          backgroundColor: \"darkorange\"\n        }} mdxType=\"Vertical\">\n        I'm taking up as much space as needed by my children\n    </Vertical>  \n  </Vertical>\n    </Playground>\n    <blockquote>\n      <p parentName=\"blockquote\">{`You can set it explicitly as well if you want `}<inlineCode parentName=\"p\">{`sizing={'content'}`}</inlineCode></p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"flex-sized-ratios\"\n    }}>{`Flex sized ratios`}</h2>\n    <p>{`With flex sizing, you can specify `}<inlineCode parentName=\"p\">{`number`}</inlineCode>{` values on how much you want differnt items to flex. e.g. We have `}<inlineCode parentName=\"p\">{`1`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`2`}</inlineCode>{` as the sizing on the children of the following horizontal:`}</p>\n    <Playground __position={3} __code={'<Horizontal\\n  height={100}\\n  spacing={0}\\n  style={{ backgroundColor: \\'lightskyblue\\' }}\\n>\\n  <Flex sizing={1} style={{ backgroundColor: \\'darkorange\\' }}>\\n    I\\'m taking 1\\n  </Flex>\\n  <Flex sizing={2} style={{ backgroundColor: \\'lightpink\\' }}>\\n    I\\'m taking 2\\n  </Flex>\\n</Horizontal>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      Flex,\n      Content\n    }} mdxType=\"Playground\">\n  <Horizontal height={100} spacing={0} style={{\n        backgroundColor: \"lightskyblue\"\n      }} mdxType=\"Horizontal\">\n    <Flex sizing={1} style={{\n          backgroundColor: \"darkorange\"\n        }} mdxType=\"Flex\">\n        I'm taking 1\n    </Flex>  \n    <Flex sizing={2} style={{\n          backgroundColor: \"lightpink\"\n        }} mdxType=\"Flex\">\n        I'm taking 2\n    </Flex>\n  </Horizontal>\n    </Playground>\n    <p>{`You can even mix `}<inlineCode parentName=\"p\">{`Flex`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Content`}</inlineCode>{` sizing if you want: `}</p>\n    <Playground __position={4} __code={'<Horizontal\\n  height={100}\\n  spacing={0}\\n  style={{ backgroundColor: \\'lightskyblue\\' }}\\n>\\n  <Content width={100} style={{ backgroundColor: \\'limegreen\\' }}>\\n    Exactly 100px\\n  </Content>\\n  <Flex sizing={1} style={{ backgroundColor: \\'darkorange\\' }}>\\n    I\\'m taking 1 from remainder\\n  </Flex>\\n  <Flex sizing={2} style={{ backgroundColor: \\'lightpink\\' }}>\\n    I\\'m taking 2 from remainder\\n  </Flex>\\n</Horizontal>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      Flex,\n      Content\n    }} mdxType=\"Playground\">\n  <Horizontal height={100} spacing={0} style={{\n        backgroundColor: \"lightskyblue\"\n      }} mdxType=\"Horizontal\">\n    <Content width={100} style={{\n          backgroundColor: \"limegreen\"\n        }} mdxType=\"Content\">Exactly 100px</Content>\n    <Flex sizing={1} style={{\n          backgroundColor: \"darkorange\"\n        }} mdxType=\"Flex\">\n        I'm taking 1 from remainder\n    </Flex>  \n    <Flex sizing={2} style={{\n          backgroundColor: \"lightpink\"\n        }} mdxType=\"Flex\">\n        I'm taking 2 from remainder\n    </Flex>\n  </Horizontal>\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}