{"version":3,"sources":["/home/travis/build/basarat/gls/src/styles/scroll.ts","/home/travis/build/basarat/gls/src/common.tsx","/home/travis/build/basarat/gls/src/internal/utils.ts","/home/travis/build/basarat/gls/src/components/grid.tsx","/home/travis/build/basarat/gls/src/components/vertical.tsx","/home/travis/build/basarat/gls/src/components/horizontal.tsx","/home/travis/build/basarat/gls/src/components/containers.tsx","/home/travis/build/basarat/gls/src/index.tsx","/home/travis/build/basarat/gls/src/demos/index.tsx","/home/travis/build/basarat/gls/src/vertical.mdx"],"names":["scrollBoth","-webkit-overflow-scrolling","overflow","scrollHorizontal","overflowX","scrollVertical","overflowY","scrollDisabled","Spacing","vertical","horizontal","grid","boxUnitToString","value","toString","processGLSProps","props","scroll","_props$styles","styles","otherProps","Object","objectWithoutProperties","objectSpread","className","typestyle","apply","scrollHelpers","concat","toConsumableArray","gridSpaced","topAndBottom","leftAndRight","arguments","length","undefined","marginTop","marginLeft","&>*","Grid","_processGLSProps","spacing","_props$spacing","slicedToArray","klass","classes","react","assign","data-comment","displayName","Vertical","horizontalAlign","verticalAlign","csstips","Horizontal","Flex","Content","_processGLSProps2","__webpack_require__","d","__webpack_exports__","vertical_Vertical","horizontal_Horizontal","containers_Flex","BlueDiv","react_default","a","createElement","style","backgroundColor","children","PinkDiv","layoutProps","MDXLayout","MDXContent","_ref","components","index_es","mdxType","id","index_esm","__position","__code","__scope","this","Playground","Props","demos","src","demos_BlueDiv","isMDXComponent"],"mappings":"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","file":"static/js/src-vertical.c4fe85f0.js","sourcesContent":["/**\n * @module scroll helpers\n */\nimport { types } from 'typestyle';\n\nexport const scrollBoth: types.NestedCSSProperties = {\n  '-webkit-overflow-scrolling': 'touch',\n  overflow: 'auto'\n};\n\nexport const scrollHorizontal: types.NestedCSSProperties = {\n  '-webkit-overflow-scrolling': 'touch',\n  overflowX: 'auto'\n};\n\nexport const scrollVertical: types.NestedCSSProperties = {\n  '-webkit-overflow-scrolling': 'touch',\n  overflowY: 'auto'\n};\n\n/**\n * If you expect a child somewhere down in the tree to scroll\n * you need to tell the browser to prevent a scroll bar. \n * Example use : `parent(scrollDisabled) > child(scroll)`\n */\nexport const scrollDisabled: types.NestedCSSProperties = {\n  overflow: 'hidden'\n};\n","import { types } from \"typestyle\";\n\n/** \n * The default spacing used by the layout components \n * You can customize it e.g. \n * ```ts\n * import { Spacing } from 'gls';\n * Spacing.vertical = 30;\n * ```\n */\nexport const Spacing = {\n  vertical: 24,\n  horizontal: 24,\n  grid: {\n    vertical: 24,\n    horizontal: 24,\n  }\n}\n\n/** \n * Example: \n * - 5 (implies 5px)\n * - '5rem'\n */\nexport type BoxUnit = number | string;\n\n/**\n * A box function is something that can take:\n * - all\n * - topAndBottom + leftRight\n * - top + right + bottom + left\n */\nexport interface BoxFunction<T> {\n  (all: BoxUnit): T;\n  (topAndBottom: BoxUnit, leftAndRight: BoxUnit): T;\n  (top: BoxUnit, right: BoxUnit, bottom: BoxUnit, left: BoxUnit): T;\n}\n\n/** \n * Props accepted by all our components \n */\nexport interface GLSProps extends React.HTMLProps<HTMLDivElement> {\n  scroll?: 'both' | 'vertical' | 'horizontal' | 'disabled';\n  styles?: [types.NestedCSSProperties | null | false]\n}\n","import * as typestyle from 'typestyle';\nimport { BoxUnit, GLSProps } from \"../common\";\nimport * as scrollHelpers from \"../styles/scroll\";\n\n/**\n * For `number` we assume pixels e.g. 5 => '5px'\n * For `string` *you* should provide the unit e.g. '5px'\n */\nexport function boxUnitToString(value: BoxUnit): string {\n  if (typeof value === 'number') {\n    return value.toString() + 'px';\n  }\n  else {\n    return value;\n  }\n}\n\n/** \n * Converts common suppoted props into a `klass` + remainder \n */\nexport function processGLSProps<T extends GLSProps>(props: T): Omit<T, 'scroll' | 'styles'> {\n  const { scroll, styles = [], ...otherProps } = props;\n\n  return {\n    ...otherProps,\n    className: typestyle.classes(\n      props.className,\n      typestyle.style(\n        /** Scroll */\n        props.scroll != null && (\n          props.scroll == 'disabled' ? scrollHelpers.scrollDisabled\n            : props.scroll == 'horizontal' ? scrollHelpers.scrollHorizontal\n              : props.scroll == 'vertical' ? scrollHelpers.scrollVertical\n                : scrollHelpers.scrollBoth\n        ),\n        /** Any user customizations */\n        ...styles,\n      )\n    ),\n  }\n}","import * as typestyle from 'typestyle';\nimport { types, classes } from 'typestyle';\nimport * as React from 'react';\nimport { BoxUnit, GLSProps } from '../common';\nimport { boxUnitToString, processGLSProps } from '../internal/utils';\n\n/**\n * Puts a (horizontal AND vertical) margin between each child\n */\nexport function gridSpaced(both: BoxUnit): string;\nexport function gridSpaced(topAndBottom: BoxUnit, leftAndRight: BoxUnit): string;\nexport function gridSpaced(topAndBottom: BoxUnit, leftAndRight = topAndBottom): string {\n  const vertical = boxUnitToString(topAndBottom);\n  const horizontal = boxUnitToString(leftAndRight);\n  return typestyle.style(\n    {\n      marginTop: '-' + vertical,\n      marginLeft: '-' + horizontal,\n      '&>*': {\n        marginTop: vertical,\n        marginLeft: horizontal,\n      }\n    } as types.CSSProperties\n  );\n};\n\nexport interface GridProps extends GLSProps {\n  spacing?:\n  | BoxUnit\n  | [BoxUnit, BoxUnit]\n}\n\n/** \n * Lays out children with a margin between them (horizontal and vertical)\n */\nexport const Grid: React.FC<GridProps> = (props) => {\n  const { className, ...otherProps } = processGLSProps(props);\n\n  /** \n   * Figure out the spacing requested \n   */\n  let horizontal!: BoxUnit;\n  let vertical!: BoxUnit;\n  if ('spacing' in props && props.spacing != null) {\n    delete (otherProps as any).spacing;\n    if (typeof props.spacing == 'number' || typeof props.spacing == 'string') {\n      horizontal = props.spacing;\n      vertical = horizontal;\n    } else {\n      [vertical, horizontal] = props.spacing;\n    }\n  }\n\n  const klass = classes(\n    className,\n    gridSpaced(vertical, horizontal),\n  );\n  return (\n    <div {...otherProps} className={klass} data-comment='Grid' />\n  );\n}\nGrid.displayName = 'Grid';\n","import * as typestyle from 'typestyle';\nimport * as React from 'react';\nimport * as csstips from 'csstips';\nimport { Spacing, GLSProps } from '../common';\nimport { processGLSProps } from '../internal/utils';\n\n///////////////////////////////////\n// Vertical \n///////////////////////////////////\n\nexport interface VerticalProps extends GLSProps {\n  spacing?: number,\n\n  verticalAlign?: 'top' /** default */ | 'center' | 'bottom',\n  horizontalAlign?: 'left' /** default */ | 'center' | 'right',\n}\n\n/** \n * Layout out children with a vertical margin between them\n */\nexport const Vertical: React.FC<VerticalProps> = (props) => {\n  const {\n    className,\n    horizontalAlign,\n    verticalAlign,\n    ...otherProps\n  } = processGLSProps(props);\n\n  const klass = typestyle.classes(\n    className,\n    typestyle.style(\n      csstips.content,\n      csstips.vertical,\n      csstips.verticallySpaced(props.spacing == null ? Spacing.vertical : props.spacing),\n      verticalAlign == 'center' && csstips.centerJustified,\n      verticalAlign == 'bottom' && csstips.endJustified,\n      horizontalAlign == 'right' && csstips.end,\n      horizontalAlign == 'center' && csstips.center,\n    )\n  );\n\n  return (\n    <div {...otherProps} className={klass} data-comment='Vertical' />\n  );\n}\nVertical.displayName = 'Vertical';\n","import * as typestyle from 'typestyle';\nimport * as React from 'react';\nimport * as csstips from 'csstips';\nimport { Spacing, GLSProps } from '../common';\nimport { processGLSProps } from '../internal/utils';\n\n///////////////////////////////////\n// Horizontal\n///////////////////////////////////\n\nexport interface HorizontalProps extends GLSProps {\n  spacing?: number,\n\n  horizontalAlign?: 'left' /** default */ | 'center' | 'right',\n  verticalAlign?: 'top' /** default */ | 'center' | 'bottom',\n}\n\nexport const Horizontal: React.FC<HorizontalProps> = (props) => {\n  const {\n    className,\n    horizontalAlign,\n    verticalAlign,\n    ...otherProps } = processGLSProps(props);\n\n  const klass =\n    typestyle.classes(\n      className,\n      typestyle.style(\n        csstips.content,\n        csstips.horizontal,\n        csstips.horizontallySpaced(props.spacing == null ? Spacing.horizontal : props.spacing),\n        horizontalAlign == 'right' && csstips.endJustified,\n        horizontalAlign == 'center' && csstips.centerJustified,\n        verticalAlign == 'center' && csstips.center,\n        verticalAlign == 'bottom' && csstips.end,\n      )\n    );\n\n  return (\n    <div {...otherProps} className={klass} data-comment='Horizontal' />\n  );\n}\nHorizontal.displayName = 'Horizontal';","import * as typestyle from 'typestyle';\nimport * as React from 'react';\nimport * as csstips from 'csstips';\nimport { GLSProps } from '../common';\nimport { processGLSProps } from '../internal/utils';\n\n/** \n * For providing a *as much as available* amount of space for an item\n */\nexport const Flex: React.FC<GLSProps> = (props) => {\n  const { className, ...otherProps } = processGLSProps(props);\n  const klass = typestyle.classes(\n    className,\n    typestyle.style(csstips.flex)\n  );\n  return (\n    <div {...otherProps} className={klass} data-comment='Flex' />\n  );\n};\nFlex.displayName = 'Flex';\n\n/** \n * For providing a *as much as needed* amount of space for an item\n */\nexport const Content: React.FC<GLSProps> = (props) => {\n  const { className, ...otherProps } = processGLSProps(props);\n  const klass = typestyle.classes(\n    className,\n    typestyle.style(csstips.content)\n  );\n  return (\n    <div {...otherProps} className={klass} data-comment='Content' />\n  );\n};\nContent.displayName = 'Content';\n","export * from './styles/scroll';\n\nexport * from './common';\nexport * from './components/grid';\nexport * from './components/vertical';\nexport * from './components/horizontal';\nexport * from './components/containers';\n","/** \n * Demo components for docs \n */\n\nimport React from \"react\";\n\nexport const BlueDiv: React.FC = (props) => <div style={{ backgroundColor: \"lightskyblue\" }} children={props.children} />;\nexport const PinkDiv: React.FC = (props) => <div style={{ backgroundColor: \"lightpink\" }} children={props.children} />;\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Vertical } from '.'; \nimport * as demos from './demos'; \n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"vertical\"\n    }}>{`Vertical`}</h1>\n    <p>{`Lays out children in a vertically spaced layout.`}</p>\n    <Playground __position={0} __code={'<Vertical>\\n  <demos.BlueDiv>Hello</demos.BlueDiv>\\n  <div>World</div>\\n</Vertical>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Vertical,\n      demos\n    }} mdxType=\"Playground\">\n  <Vertical mdxType=\"Vertical\">\n    <demos.BlueDiv>Hello</demos.BlueDiv>\n    <div>World</div>\n  </Vertical>\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}