{"version":3,"sources":["/home/travis/build/basarat/gls/src/docs/principles/sizing.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","this","Playground","Vertical","Horizontal","Stretch","Content","Box","demos","height","style","backgroundColor","sizing","spacing","width","isMDXComponent"],"mappings":"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","file":"static/js/src-docs-principles-sizing.c0461b65.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground } from 'docz';\nimport { Vertical, Horizontal, Stretch, Content, Box } from '../..'; \nimport * as demos from '../../demos'; \n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <demos.Star />\n    <h1 {...{\n      \"id\": \"sizing\"\n    }}>{`Sizing`}</h1>\n    <p>{`When thinking about the size of a container you need to think about `}<em parentName=\"p\">{`explicit`}</em>{` size and `}<em parentName=\"p\">{`implicit`}</em>{` sizing. We cover these concepts below.`}</p>\n    <h2 {...{\n      \"id\": \"sizeprops-explicit-size\"\n    }}>{`SizeProps (Explicit size)`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`/** \n * Add support for explicit size\n */\nexport interface SizeProps {\n  height?: CSSLength,\n  minHeight?: CSSLength,\n  maxHeight?: CSSLength,\n\n  width?: CSSLength,\n  minWidth?: CSSLength,\n  maxWidth?: CSSLength,\n}\n`}</code></pre>\n    <p>{`Explicit sizes are driven by `}<inlineCode parentName=\"p\">{`width,height,minHeight,minWidth,maxHeight,maxWidth`}</inlineCode>{` arguments. You can have an explicit value on only one dimension e.g. here we have a simple `}<inlineCode parentName=\"p\">{`Vertical`}</inlineCode>{` container with explicit `}<inlineCode parentName=\"p\">{`height`}</inlineCode>{` only: `}</p>\n    <Playground __position={1} __code={'<Vertical height={100} style={{ backgroundColor: \\'lightskyblue\\' }}>\\n  Hello world\\n</Vertical>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      Stretch,\n      Content,\n      Box,\n      demos\n    }} mdxType=\"Playground\">\n  <Vertical height={100} style={{\n        backgroundColor: \"lightskyblue\"\n      }} mdxType=\"Vertical\">\n    Hello world\n  </Vertical>\n    </Playground>\n    <p>{`This is essentially what you are doing in most design tools out there. Sadly explicit `}<inlineCode parentName=\"p\">{`height+width`}</inlineCode>{` sizing does not scale to `}<em parentName=\"p\">{`real`}</em>{` applications, where sizes need to be reactive to either their parent or their content. Fortunately we provide concepts to handle these cases with `}<strong parentName=\"p\"><em parentName=\"strong\">{`implicit sizing`}</em></strong>{` concepts we cover next.`}</p>\n    <h2 {...{\n      \"id\": \"sizingprop-implicit-sizing\"\n    }}>{`SizingProp (Implicit sizing)`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Implicit sizing controls the component behaviour when no explicit size properties are provided.`}</p>\n    </blockquote>\n    <p>{`The `}<inlineCode parentName=\"p\">{`SizingProp`}</inlineCode>{` is what controls the implicit sizing (content / stretch / stretch-ratio) features: `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`/** \n * Specifies sizing interaction\n */\nexport interface SizingProp {\n  /** \n   * Specifies \\`sizing\\` interaction\n   */\n  sizing?:\n  | 'content' /** default */\n  | 'stretch' /** Same as \\`1\\` */\n  | number /** A stretch ratio */;\n}\n`}</code></pre>\n    <p>{`We cover these individually below:`}</p>\n    <h3 {...{\n      \"id\": \"content-sized\"\n    }}>{`Content sized`}</h3>\n    <p>{`A content sized component takes up as much space as needed by the children. This is the most common sizing that you want and is therefore the default for our containers.`}</p>\n    <p>{`In the example below, we have an explicit sized `}<inlineCode parentName=\"p\">{`Vertical`}</inlineCode>{` (background `}<inlineCode parentName=\"p\">{`lightskyblue`}</inlineCode>{`) with an inner content-sized `}<inlineCode parentName=\"p\">{`Vertical`}</inlineCode>{` (background `}<inlineCode parentName=\"p\">{`darkorange`}</inlineCode>{`). The inner vertical keeps it size to match whatever is needed by its children (observed below as you see the background of the parent-lightskyblue where the child-darkorange ends).`}</p>\n    <Playground __position={2} __code={'<Vertical height={100} style={{ backgroundColor: \\'lightskyblue\\' }}>\\n  <Vertical style={{ backgroundColor: \\'darkorange\\' }}>\\n    I\\'m taking up as much space as needed by my children\\n  </Vertical>\\n</Vertical>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      Stretch,\n      Content,\n      Box,\n      demos\n    }} mdxType=\"Playground\">\n  <Vertical height={100} style={{\n        backgroundColor: \"lightskyblue\"\n      }} mdxType=\"Vertical\">\n    <Vertical style={{\n          backgroundColor: \"darkorange\"\n        }} mdxType=\"Vertical\">\n        I'm taking up as much space as needed by my children\n    </Vertical>  \n  </Vertical>\n    </Playground>\n    <blockquote>\n      <p parentName=\"blockquote\">{`You can set sizing to `}<inlineCode parentName=\"p\">{`content`}</inlineCode>{` explicitly as well if you want (`}<inlineCode parentName=\"p\">{`sizing={'content'}`}</inlineCode>{`)`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"stretch-sized\"\n    }}>{`Stretch sized`}</h3>\n    <p>{`A stretch sized component takes up as much space as offered by the parent. `}</p>\n    <p>{`In the example below, we have an explicit sized `}<inlineCode parentName=\"p\">{`Vertical`}</inlineCode>{` (background `}<inlineCode parentName=\"p\">{`lightskyblue`}</inlineCode>{`) with an inner stretch-sized `}<inlineCode parentName=\"p\">{`Vertical`}</inlineCode>{` (background `}<inlineCode parentName=\"p\">{`darkorange`}</inlineCode>{`). The inner vertical keeps its size to match that of the outer container (observed below as you don't see the background of the parent-lightskyblue as it is filled in by the child-darkorange).`}</p>\n    <Playground __position={3} __code={'<Vertical height={100} style={{ backgroundColor: \\'lightskyblue\\' }}>\\n  <Vertical sizing={\\'stretch\\'} style={{ backgroundColor: \\'darkorange\\' }}>\\n    I\\'m taking up all the space from the parent\\n  </Vertical>\\n</Vertical>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      Stretch,\n      Content,\n      Box,\n      demos\n    }} mdxType=\"Playground\">\n  <Vertical height={100} style={{\n        backgroundColor: \"lightskyblue\"\n      }} mdxType=\"Vertical\">\n    <Vertical sizing={'stretch'} style={{\n          backgroundColor: \"darkorange\"\n        }} mdxType=\"Vertical\">\n        I'm taking up all the space from the parent\n    </Vertical>  \n  </Vertical>\n    </Playground>\n    <h3 {...{\n      \"id\": \"stretch-ratios\"\n    }}>{`Stretch ratios`}</h3>\n    <p>{`With stretch sizing, you can specify `}<inlineCode parentName=\"p\">{`number`}</inlineCode>{` values. This controls how much you want different items dividing the space provided by their parent. e.g. We have `}<inlineCode parentName=\"p\">{`1`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`2`}</inlineCode>{` as the sizing on the children of the following horizontal:`}</p>\n    <Playground __position={4} __code={'<Horizontal\\n  height={100}\\n  spacing={0}\\n  style={{ backgroundColor: \\'lightskyblue\\' }}\\n>\\n  <Stretch sizing={1} style={{ backgroundColor: \\'darkorange\\' }}>\\n    I\\'m taking 1\\n  </Stretch>\\n  <Stretch sizing={2} style={{ backgroundColor: \\'lightpink\\' }}>\\n    I\\'m taking 2\\n  </Stretch>\\n</Horizontal>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      Stretch,\n      Content,\n      Box,\n      demos\n    }} mdxType=\"Playground\">\n  <Horizontal height={100} spacing={0} style={{\n        backgroundColor: \"lightskyblue\"\n      }} mdxType=\"Horizontal\">\n    <Stretch sizing={1} style={{\n          backgroundColor: \"darkorange\"\n        }} mdxType=\"Stretch\">\n        I'm taking 1\n    </Stretch>  \n    <Stretch sizing={2} style={{\n          backgroundColor: \"lightpink\"\n        }} mdxType=\"Stretch\">\n        I'm taking 2\n    </Stretch>\n  </Horizontal>\n    </Playground>\n    <h2 {...{\n      \"id\": \"mixing\"\n    }}>{`Mixing`}</h2>\n    <p>{`You can mix `}<inlineCode parentName=\"p\">{`Stretch`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Content`}</inlineCode>{` and explicit sizing to match your design requirements as shown in the example below (`}<inlineCode parentName=\"p\">{`explicit,content,stretch 1,stretch 2`}</inlineCode>{`):`}</p>\n    <Playground __position={5} __code={'<Horizontal\\n  height={100}\\n  spacing={0}\\n  style={{ backgroundColor: \\'lightskyblue\\' }}\\n>\\n  {/* Explicit width 100 */}\\n  <Content width={100} style={{ backgroundColor: \\'limegreen\\' }}>\\n    Exactly 100px\\n  </Content>\\n  {/* Implicit content */}\\n  <Content style={{ backgroundColor: \\'gold\\' }}>As much as I need</Content>\\n  {/* Implicit stretch sizing = 1 */}\\n  <Stretch sizing={1} style={{ backgroundColor: \\'darkorange\\' }}>\\n    I\\'m taking 1 from remainder\\n  </Stretch>\\n  {/* Implicit stretch sizing = 2 */}\\n  <Stretch sizing={2} style={{ backgroundColor: \\'lightpink\\' }}>\\n    I\\'m taking 2 from remainder\\n  </Stretch>\\n</Horizontal>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      Stretch,\n      Content,\n      Box,\n      demos\n    }} mdxType=\"Playground\">\n  <Horizontal height={100} spacing={0} style={{\n        backgroundColor: \"lightskyblue\"\n      }} mdxType=\"Horizontal\">\n    {\n          /* Explicit width 100 */\n        }\n    <Content width={100} style={{\n          backgroundColor: \"limegreen\"\n        }} mdxType=\"Content\">Exactly 100px</Content>\n    {\n          /* Implicit content */\n        }\n    <Content style={{\n          backgroundColor: \"gold\"\n        }} mdxType=\"Content\">As much as I need</Content>\n    {\n          /* Implicit stretch sizing = 1 */\n        }\n    <Stretch sizing={1} style={{\n          backgroundColor: \"darkorange\"\n        }} mdxType=\"Stretch\">\n        I'm taking 1 from remainder\n    </Stretch>  \n    {\n          /* Implicit stretch sizing = 2 */\n        }\n    <Stretch sizing={2} style={{\n          backgroundColor: \"lightpink\"\n        }} mdxType=\"Stretch\">\n        I'm taking 2 from remainder\n    </Stretch>\n  </Horizontal>\n    </Playground>\n    <h2 {...{\n      \"id\": \"additional-guidance\"\n    }}>{`Additional Guidance`}</h2>\n    <h3 {...{\n      \"id\": \"explicit-size-requires-sizingcontent\"\n    }}>{`Explicit Size requires sizing='content'`}</h3>\n    <p><inlineCode parentName=\"p\">{`sizing=stretch`}</inlineCode>{` takes precedence on any explicit sizing e.g. `}<inlineCode parentName=\"p\">{`width`}</inlineCode>{` has no effect in the following example:`}</p>\n    <Playground __position={6} __code={'<Horizontal\\n  height={100}\\n  spacing={0}\\n  style={{ backgroundColor: \\'lightskyblue\\' }}\\n>\\n  {/* Explicit width 100 */}\\n  <Box sizing=\\\"stretch\\\" width={100} style={{ backgroundColor: \\'limegreen\\' }}>\\n    Width 100px will not work because of `sizing=stretch`\\n  </Box>\\n</Horizontal>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      Stretch,\n      Content,\n      Box,\n      demos\n    }} mdxType=\"Playground\">\n  <Horizontal height={100} spacing={0} style={{\n        backgroundColor: \"lightskyblue\"\n      }} mdxType=\"Horizontal\">\n    {\n          /* Explicit width 100 */\n        }\n    <Box sizing='stretch' width={100} style={{\n          backgroundColor: \"limegreen\"\n        }} mdxType=\"Box\">Width 100px will not work because of `sizing=stretch`</Box>\n  </Horizontal>\n    </Playground>\n    <p>{`For for explicit size to work sizing needs to be `}<inlineCode parentName=\"p\">{`content`}</inlineCode>{`. All our components are `}<inlineCode parentName=\"p\">{`sizing=content`}</inlineCode>{` by default so you don't need to think about it when using our components. The following example demonstrates this default: `}</p>\n    <Playground __position={7} __code={'<Horizontal\\n  height={100}\\n  spacing={0}\\n  style={{ backgroundColor: \\'lightskyblue\\' }}\\n>\\n  {/* Explicit width 100 */}\\n  <Box width={100} style={{ backgroundColor: \\'limegreen\\' }}>\\n    Width 100px works\\n  </Box>\\n</Horizontal>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      Stretch,\n      Content,\n      Box,\n      demos\n    }} mdxType=\"Playground\">\n  <Horizontal height={100} spacing={0} style={{\n        backgroundColor: \"lightskyblue\"\n      }} mdxType=\"Horizontal\">\n    {\n          /* Explicit width 100 */\n        }\n    <Box width={100} style={{\n          backgroundColor: \"limegreen\"\n        }} mdxType=\"Box\">Width 100px works</Box>\n  </Horizontal>\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}