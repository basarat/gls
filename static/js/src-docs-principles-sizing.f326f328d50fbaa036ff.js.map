{"version":3,"sources":["/home/travis/build/basarat/gls/src/docs/principles/sizing.mdx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_travis_build_basarat_gls_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","_demos__WEBPACK_IMPORTED_MODULE_5__","id","parentName","className","docz__WEBPACK_IMPORTED_MODULE_3__","__position","__code","__scope","this","Playground","Vertical","Horizontal","Flex","Content","Box","demos","___WEBPACK_IMPORTED_MODULE_4__","height","style","backgroundColor","sizing","spacing","width","isMDXComponent"],"mappings":"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","file":"static/js/src-docs-principles-sizing.d6ddc81c.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground } from 'docz';\nimport { Vertical, Horizontal, Flex, Content, Box } from '../..'; \nimport * as demos from '../../demos'; \n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <demos.Star />\n    <h1 {...{\n      \"id\": \"sizing\"\n    }}>{`Sizing`}</h1>\n    <p>{`When thinking about the size of a container you need to think about `}<em parentName=\"p\">{`explicit`}</em>{` size and `}<em parentName=\"p\">{`implicit`}</em>{` sizing. We cover these concepts below.`}</p>\n    <h2 {...{\n      \"id\": \"sizeprops-explicit-size\"\n    }}>{`SizeProps (Explicit size)`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`/** \n * Add support for explicit size\n */\nexport interface SizeProps {\n  height?: CSSLength,\n  minHeight?: CSSLength,\n  maxHeight?: CSSLength,\n\n  width?: CSSLength,\n  minWidth?: CSSLength,\n  maxWidth?: CSSLength,\n}\n`}</code></pre>\n    <p>{`Explicit sizes are driven by `}<inlineCode parentName=\"p\">{`width,height,minHeight,minWidth,maxHeight,maxWidth`}</inlineCode>{` arguments. You can have an explicit value on only one dimension e.g. here we have a simple `}<inlineCode parentName=\"p\">{`Vertical`}</inlineCode>{` container with explicit `}<inlineCode parentName=\"p\">{`height`}</inlineCode>{` only: `}</p>\n    <Playground __position={1} __code={'<Vertical height={100} style={{ backgroundColor: \\'lightskyblue\\' }}>\\n  Hello world\\n</Vertical>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      Flex,\n      Content,\n      Box,\n      demos\n    }} mdxType=\"Playground\">\n  <Vertical height={100} style={{\n        backgroundColor: \"lightskyblue\"\n      }} mdxType=\"Vertical\">\n    Hello world\n  </Vertical>\n    </Playground>\n    <p>{`This is essentially what you are doing in most design tools out there. Sadly explicit `}<inlineCode parentName=\"p\">{`height+width`}</inlineCode>{` sizing does not scale to `}<em parentName=\"p\">{`real`}</em>{` applications, where sizes need to be reactive to either their parent or their content. Fortunately we provide concepts to handle these cases with `}<strong parentName=\"p\"><em parentName=\"strong\">{`implicit sizing`}</em></strong>{` concepts we cover next.`}</p>\n    <h2 {...{\n      \"id\": \"sizingprop-implicit-sizing\"\n    }}>{`SizingProp (Implicit sizing)`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Implicit sizing controls the component behaviour when no explicit size properties are provided.`}</p>\n    </blockquote>\n    <p>{`The `}<inlineCode parentName=\"p\">{`SizingProp`}</inlineCode>{` is what controls the implicit sizing (content / flex / flex-ratio) features: `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`/** \n * Specifies sizing interaction\n */\nexport interface SizingProp {\n  /** \n   * Specifies \\`sizing\\` interaction\n   */\n  sizing?:\n  | 'content' /** default */\n  | 'flex' /** Same as \\`1\\` */\n  | number /** A flex ratio */;\n}\n`}</code></pre>\n    <p>{`We cover these individually below:`}</p>\n    <h3 {...{\n      \"id\": \"content-sized\"\n    }}>{`Content sized`}</h3>\n    <p>{`A content sized component takes up as much space as needed by the children. This is the most common sizing that you want and is therefore the default for our containers.`}</p>\n    <p>{`In the example below, we have an explicit sized `}<inlineCode parentName=\"p\">{`Vertical`}</inlineCode>{` (background `}<inlineCode parentName=\"p\">{`lightskyblue`}</inlineCode>{`) with an inner content-sized `}<inlineCode parentName=\"p\">{`Vertical`}</inlineCode>{` (background `}<inlineCode parentName=\"p\">{`darkorange`}</inlineCode>{`). The inner vertical keeps it size to match whatever is needed by its children (observed below as you see the background of the parent-lightskyblue where the child-darkorange ends).`}</p>\n    <Playground __position={2} __code={'<Vertical height={100} style={{ backgroundColor: \\'lightskyblue\\' }}>\\n  <Vertical style={{ backgroundColor: \\'darkorange\\' }}>\\n    I\\'m taking up as much space as needed by my children\\n  </Vertical>\\n</Vertical>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      Flex,\n      Content,\n      Box,\n      demos\n    }} mdxType=\"Playground\">\n  <Vertical height={100} style={{\n        backgroundColor: \"lightskyblue\"\n      }} mdxType=\"Vertical\">\n    <Vertical style={{\n          backgroundColor: \"darkorange\"\n        }} mdxType=\"Vertical\">\n        I'm taking up as much space as needed by my children\n    </Vertical>  \n  </Vertical>\n    </Playground>\n    <blockquote>\n      <p parentName=\"blockquote\">{`You can set sizing to `}<inlineCode parentName=\"p\">{`content`}</inlineCode>{` explicitly as well if you want (`}<inlineCode parentName=\"p\">{`sizing={'content'}`}</inlineCode>{`)`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"flex-sized\"\n    }}>{`Flex sized`}</h3>\n    <p>{`A flex sized component takes up as much space as offered by the parent. `}</p>\n    <p>{`In the example below, we have an explicit sized `}<inlineCode parentName=\"p\">{`Vertical`}</inlineCode>{` (background `}<inlineCode parentName=\"p\">{`lightskyblue`}</inlineCode>{`) with an inner flex-sized `}<inlineCode parentName=\"p\">{`Vertical`}</inlineCode>{` (background `}<inlineCode parentName=\"p\">{`darkorange`}</inlineCode>{`). The inner vertical keeps its size to match that of the outer container (observed below as you don't see the background of the parent-lightskyblue as it is filled in by the child-darkorange).`}</p>\n    <Playground __position={3} __code={'<Vertical height={100} style={{ backgroundColor: \\'lightskyblue\\' }}>\\n  <Vertical sizing={\\'flex\\'} style={{ backgroundColor: \\'darkorange\\' }}>\\n    I\\'m taking up all the space from the parent\\n  </Vertical>\\n</Vertical>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      Flex,\n      Content,\n      Box,\n      demos\n    }} mdxType=\"Playground\">\n  <Vertical height={100} style={{\n        backgroundColor: \"lightskyblue\"\n      }} mdxType=\"Vertical\">\n    <Vertical sizing={'flex'} style={{\n          backgroundColor: \"darkorange\"\n        }} mdxType=\"Vertical\">\n        I'm taking up all the space from the parent\n    </Vertical>  \n  </Vertical>\n    </Playground>\n    <h3 {...{\n      \"id\": \"flex-sized-ratios\"\n    }}>{`Flex sized ratios`}</h3>\n    <p>{`With flex sizing, you can specify `}<inlineCode parentName=\"p\">{`number`}</inlineCode>{` values. This controls how much you want different items dividing the space provided by their parent. e.g. We have `}<inlineCode parentName=\"p\">{`1`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`2`}</inlineCode>{` as the sizing on the children of the following horizontal:`}</p>\n    <Playground __position={4} __code={'<Horizontal\\n  height={100}\\n  spacing={0}\\n  style={{ backgroundColor: \\'lightskyblue\\' }}\\n>\\n  <Flex sizing={1} style={{ backgroundColor: \\'darkorange\\' }}>\\n    I\\'m taking 1\\n  </Flex>\\n  <Flex sizing={2} style={{ backgroundColor: \\'lightpink\\' }}>\\n    I\\'m taking 2\\n  </Flex>\\n</Horizontal>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      Flex,\n      Content,\n      Box,\n      demos\n    }} mdxType=\"Playground\">\n  <Horizontal height={100} spacing={0} style={{\n        backgroundColor: \"lightskyblue\"\n      }} mdxType=\"Horizontal\">\n    <Flex sizing={1} style={{\n          backgroundColor: \"darkorange\"\n        }} mdxType=\"Flex\">\n        I'm taking 1\n    </Flex>  \n    <Flex sizing={2} style={{\n          backgroundColor: \"lightpink\"\n        }} mdxType=\"Flex\">\n        I'm taking 2\n    </Flex>\n  </Horizontal>\n    </Playground>\n    <h2 {...{\n      \"id\": \"mixing\"\n    }}>{`Mixing`}</h2>\n    <p>{`You can mix `}<inlineCode parentName=\"p\">{`Flex`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Content`}</inlineCode>{` and explicit sizing to match your design requirements as shown in the example below (`}<inlineCode parentName=\"p\">{`explicit,content,flex 1,flex 2`}</inlineCode>{`):`}</p>\n    <Playground __position={5} __code={'<Horizontal\\n  height={100}\\n  spacing={0}\\n  style={{ backgroundColor: \\'lightskyblue\\' }}\\n>\\n  {/* Explicit width 100 */}\\n  <Content width={100} style={{ backgroundColor: \\'limegreen\\' }}>\\n    Exactly 100px\\n  </Content>\\n  {/* Implicit content */}\\n  <Content style={{ backgroundColor: \\'gold\\' }}>As much as I need</Content>\\n  {/* Implicit flex sizing = 1 */}\\n  <Flex sizing={1} style={{ backgroundColor: \\'darkorange\\' }}>\\n    I\\'m taking 1 from remainder\\n  </Flex>\\n  {/* Implicit flex sizing = 2 */}\\n  <Flex sizing={2} style={{ backgroundColor: \\'lightpink\\' }}>\\n    I\\'m taking 2 from remainder\\n  </Flex>\\n</Horizontal>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      Flex,\n      Content,\n      Box,\n      demos\n    }} mdxType=\"Playground\">\n  <Horizontal height={100} spacing={0} style={{\n        backgroundColor: \"lightskyblue\"\n      }} mdxType=\"Horizontal\">\n    {\n          /* Explicit width 100 */\n        }\n    <Content width={100} style={{\n          backgroundColor: \"limegreen\"\n        }} mdxType=\"Content\">Exactly 100px</Content>\n    {\n          /* Implicit content */\n        }\n    <Content style={{\n          backgroundColor: \"gold\"\n        }} mdxType=\"Content\">As much as I need</Content>\n    {\n          /* Implicit flex sizing = 1 */\n        }\n    <Flex sizing={1} style={{\n          backgroundColor: \"darkorange\"\n        }} mdxType=\"Flex\">\n        I'm taking 1 from remainder\n    </Flex>  \n    {\n          /* Implicit flex sizing = 2 */\n        }\n    <Flex sizing={2} style={{\n          backgroundColor: \"lightpink\"\n        }} mdxType=\"Flex\">\n        I'm taking 2 from remainder\n    </Flex>\n  </Horizontal>\n    </Playground>\n    <h2 {...{\n      \"id\": \"additional-guidance\"\n    }}>{`Additional Guidance`}</h2>\n    <h3 {...{\n      \"id\": \"explicit-size-requires-sizingcontent\"\n    }}>{`Explicit Size requires sizing='content'`}</h3>\n    <p><inlineCode parentName=\"p\">{`sizing=flex`}</inlineCode>{` takes precedence on any explicit sizing e.g. `}<inlineCode parentName=\"p\">{`width`}</inlineCode>{` has no effect in the following example:`}</p>\n    <Playground __position={6} __code={'<Horizontal\\n  height={100}\\n  spacing={0}\\n  style={{ backgroundColor: \\'lightskyblue\\' }}\\n>\\n  {/* Explicit width 100 */}\\n  <Box sizing=\\\"flex\\\" width={100} style={{ backgroundColor: \\'limegreen\\' }}>\\n    Width 100px will not work because of `sizing=flex`\\n  </Box>\\n</Horizontal>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      Flex,\n      Content,\n      Box,\n      demos\n    }} mdxType=\"Playground\">\n  <Horizontal height={100} spacing={0} style={{\n        backgroundColor: \"lightskyblue\"\n      }} mdxType=\"Horizontal\">\n    {\n          /* Explicit width 100 */\n        }\n    <Box sizing='flex' width={100} style={{\n          backgroundColor: \"limegreen\"\n        }} mdxType=\"Box\">Width 100px will not work because of `sizing=flex`</Box>\n  </Horizontal>\n    </Playground>\n    <p>{`For for explicit size to work sizing needs to be `}<inlineCode parentName=\"p\">{`content`}</inlineCode>{`. All our components are `}<inlineCode parentName=\"p\">{`sizing=content`}</inlineCode>{` by default so you don't need to think about it when using our components. The following example demonstrates this default: `}</p>\n    <Playground __position={7} __code={'<Horizontal\\n  height={100}\\n  spacing={0}\\n  style={{ backgroundColor: \\'lightskyblue\\' }}\\n>\\n  {/* Explicit width 100 */}\\n  <Box width={100} style={{ backgroundColor: \\'limegreen\\' }}>\\n    Width 100px works\\n  </Box>\\n</Horizontal>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Vertical,\n      Horizontal,\n      Flex,\n      Content,\n      Box,\n      demos\n    }} mdxType=\"Playground\">\n  <Horizontal height={100} spacing={0} style={{\n        backgroundColor: \"lightskyblue\"\n      }} mdxType=\"Horizontal\">\n    {\n          /* Explicit width 100 */\n        }\n    <Box width={100} style={{\n          backgroundColor: \"limegreen\"\n        }} mdxType=\"Box\">Width 100px works</Box>\n  </Horizontal>\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}